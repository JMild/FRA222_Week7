
Week7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003894  08003894  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003894  08003894  00013894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800389c  0800389c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800389c  0800389c  0001389c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080038a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000010  080038b4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  080038b4  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b204  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018de  00000000  00000000  0002b244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002cb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  0002d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001552f  00000000  00000000  0002e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6a5  00000000  00000000  0004371f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000898af  00000000  00000000  0004edc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d8673  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031cc  00000000  00000000  000d86c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003864 	.word	0x08003864

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08003864 	.word	0x08003864

080001d8 <__aeabi_frsub>:
 80001d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__addsf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_fsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e4 <__addsf3>:
 80001e4:	0042      	lsls	r2, r0, #1
 80001e6:	bf1f      	itttt	ne
 80001e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001ec:	ea92 0f03 	teqne	r2, r3
 80001f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f8:	d06a      	beq.n	80002d0 <__addsf3+0xec>
 80001fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000202:	bfc1      	itttt	gt
 8000204:	18d2      	addgt	r2, r2, r3
 8000206:	4041      	eorgt	r1, r0
 8000208:	4048      	eorgt	r0, r1
 800020a:	4041      	eorgt	r1, r0
 800020c:	bfb8      	it	lt
 800020e:	425b      	neglt	r3, r3
 8000210:	2b19      	cmp	r3, #25
 8000212:	bf88      	it	hi
 8000214:	4770      	bxhi	lr
 8000216:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800021a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4240      	negne	r0, r0
 8000226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000232:	bf18      	it	ne
 8000234:	4249      	negne	r1, r1
 8000236:	ea92 0f03 	teq	r2, r3
 800023a:	d03f      	beq.n	80002bc <__addsf3+0xd8>
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	fa41 fc03 	asr.w	ip, r1, r3
 8000244:	eb10 000c 	adds.w	r0, r0, ip
 8000248:	f1c3 0320 	rsb	r3, r3, #32
 800024c:	fa01 f103 	lsl.w	r1, r1, r3
 8000250:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000254:	d502      	bpl.n	800025c <__addsf3+0x78>
 8000256:	4249      	negs	r1, r1
 8000258:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800025c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000260:	d313      	bcc.n	800028a <__addsf3+0xa6>
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000266:	d306      	bcc.n	8000276 <__addsf3+0x92>
 8000268:	0840      	lsrs	r0, r0, #1
 800026a:	ea4f 0131 	mov.w	r1, r1, rrx
 800026e:	f102 0201 	add.w	r2, r2, #1
 8000272:	2afe      	cmp	r2, #254	; 0xfe
 8000274:	d251      	bcs.n	800031a <__addsf3+0x136>
 8000276:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	ea40 0003 	orr.w	r0, r0, r3
 8000288:	4770      	bx	lr
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	eb40 0000 	adc.w	r0, r0, r0
 8000290:	3a01      	subs	r2, #1
 8000292:	bf28      	it	cs
 8000294:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000298:	d2ed      	bcs.n	8000276 <__addsf3+0x92>
 800029a:	fab0 fc80 	clz	ip, r0
 800029e:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a2:	ebb2 020c 	subs.w	r2, r2, ip
 80002a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002aa:	bfaa      	itet	ge
 80002ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b0:	4252      	neglt	r2, r2
 80002b2:	4318      	orrge	r0, r3
 80002b4:	bfbc      	itt	lt
 80002b6:	40d0      	lsrlt	r0, r2
 80002b8:	4318      	orrlt	r0, r3
 80002ba:	4770      	bx	lr
 80002bc:	f092 0f00 	teq	r2, #0
 80002c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c4:	bf06      	itte	eq
 80002c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ca:	3201      	addeq	r2, #1
 80002cc:	3b01      	subne	r3, #1
 80002ce:	e7b5      	b.n	800023c <__addsf3+0x58>
 80002d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d8:	bf18      	it	ne
 80002da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002de:	d021      	beq.n	8000324 <__addsf3+0x140>
 80002e0:	ea92 0f03 	teq	r2, r3
 80002e4:	d004      	beq.n	80002f0 <__addsf3+0x10c>
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	bf08      	it	eq
 80002ec:	4608      	moveq	r0, r1
 80002ee:	4770      	bx	lr
 80002f0:	ea90 0f01 	teq	r0, r1
 80002f4:	bf1c      	itt	ne
 80002f6:	2000      	movne	r0, #0
 80002f8:	4770      	bxne	lr
 80002fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fe:	d104      	bne.n	800030a <__addsf3+0x126>
 8000300:	0040      	lsls	r0, r0, #1
 8000302:	bf28      	it	cs
 8000304:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030e:	bf3c      	itt	cc
 8000310:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000314:	4770      	bxcc	lr
 8000316:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800031a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000322:	4770      	bx	lr
 8000324:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000328:	bf16      	itet	ne
 800032a:	4608      	movne	r0, r1
 800032c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000330:	4601      	movne	r1, r0
 8000332:	0242      	lsls	r2, r0, #9
 8000334:	bf06      	itte	eq
 8000336:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033a:	ea90 0f01 	teqeq	r0, r1
 800033e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000342:	4770      	bx	lr

08000344 <__aeabi_ui2f>:
 8000344:	f04f 0300 	mov.w	r3, #0
 8000348:	e004      	b.n	8000354 <__aeabi_i2f+0x8>
 800034a:	bf00      	nop

0800034c <__aeabi_i2f>:
 800034c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000350:	bf48      	it	mi
 8000352:	4240      	negmi	r0, r0
 8000354:	ea5f 0c00 	movs.w	ip, r0
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000360:	4601      	mov	r1, r0
 8000362:	f04f 0000 	mov.w	r0, #0
 8000366:	e01c      	b.n	80003a2 <__aeabi_l2f+0x2a>

08000368 <__aeabi_ul2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e00a      	b.n	800038c <__aeabi_l2f+0x14>
 8000376:	bf00      	nop

08000378 <__aeabi_l2f>:
 8000378:	ea50 0201 	orrs.w	r2, r0, r1
 800037c:	bf08      	it	eq
 800037e:	4770      	bxeq	lr
 8000380:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000384:	d502      	bpl.n	800038c <__aeabi_l2f+0x14>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	ea5f 0c01 	movs.w	ip, r1
 8000390:	bf02      	ittt	eq
 8000392:	4684      	moveq	ip, r0
 8000394:	4601      	moveq	r1, r0
 8000396:	2000      	moveq	r0, #0
 8000398:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800039c:	bf08      	it	eq
 800039e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a6:	fabc f28c 	clz	r2, ip
 80003aa:	3a08      	subs	r2, #8
 80003ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b0:	db10      	blt.n	80003d4 <__aeabi_l2f+0x5c>
 80003b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b6:	4463      	add	r3, ip
 80003b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003bc:	f1c2 0220 	rsb	r2, r2, #32
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c4:	fa20 f202 	lsr.w	r2, r0, r2
 80003c8:	eb43 0002 	adc.w	r0, r3, r2
 80003cc:	bf08      	it	eq
 80003ce:	f020 0001 	biceq.w	r0, r0, #1
 80003d2:	4770      	bx	lr
 80003d4:	f102 0220 	add.w	r2, r2, #32
 80003d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003dc:	f1c2 0220 	rsb	r2, r2, #32
 80003e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e4:	fa21 f202 	lsr.w	r2, r1, r2
 80003e8:	eb43 0002 	adc.w	r0, r3, r2
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f2:	4770      	bx	lr

080003f4 <__aeabi_uldivmod>:
 80003f4:	b953      	cbnz	r3, 800040c <__aeabi_uldivmod+0x18>
 80003f6:	b94a      	cbnz	r2, 800040c <__aeabi_uldivmod+0x18>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	bf08      	it	eq
 80003fc:	2800      	cmpeq	r0, #0
 80003fe:	bf1c      	itt	ne
 8000400:	f04f 31ff 	movne.w	r1, #4294967295
 8000404:	f04f 30ff 	movne.w	r0, #4294967295
 8000408:	f000 b96e 	b.w	80006e8 <__aeabi_idiv0>
 800040c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000410:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000414:	f000 f806 	bl	8000424 <__udivmoddi4>
 8000418:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000420:	b004      	add	sp, #16
 8000422:	4770      	bx	lr

08000424 <__udivmoddi4>:
 8000424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000428:	9d08      	ldr	r5, [sp, #32]
 800042a:	4604      	mov	r4, r0
 800042c:	468c      	mov	ip, r1
 800042e:	2b00      	cmp	r3, #0
 8000430:	f040 8083 	bne.w	800053a <__udivmoddi4+0x116>
 8000434:	428a      	cmp	r2, r1
 8000436:	4617      	mov	r7, r2
 8000438:	d947      	bls.n	80004ca <__udivmoddi4+0xa6>
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	b142      	cbz	r2, 8000452 <__udivmoddi4+0x2e>
 8000440:	f1c2 0020 	rsb	r0, r2, #32
 8000444:	fa24 f000 	lsr.w	r0, r4, r0
 8000448:	4091      	lsls	r1, r2
 800044a:	4097      	lsls	r7, r2
 800044c:	ea40 0c01 	orr.w	ip, r0, r1
 8000450:	4094      	lsls	r4, r2
 8000452:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000456:	0c23      	lsrs	r3, r4, #16
 8000458:	fbbc f6f8 	udiv	r6, ip, r8
 800045c:	fa1f fe87 	uxth.w	lr, r7
 8000460:	fb08 c116 	mls	r1, r8, r6, ip
 8000464:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000468:	fb06 f10e 	mul.w	r1, r6, lr
 800046c:	4299      	cmp	r1, r3
 800046e:	d909      	bls.n	8000484 <__udivmoddi4+0x60>
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	f106 30ff 	add.w	r0, r6, #4294967295
 8000476:	f080 8119 	bcs.w	80006ac <__udivmoddi4+0x288>
 800047a:	4299      	cmp	r1, r3
 800047c:	f240 8116 	bls.w	80006ac <__udivmoddi4+0x288>
 8000480:	3e02      	subs	r6, #2
 8000482:	443b      	add	r3, r7
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3310 	mls	r3, r8, r0, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb00 fe0e 	mul.w	lr, r0, lr
 8000498:	45a6      	cmp	lr, r4
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x8c>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a2:	f080 8105 	bcs.w	80006b0 <__udivmoddi4+0x28c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8102 	bls.w	80006b0 <__udivmoddi4+0x28c>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004b4:	eba4 040e 	sub.w	r4, r4, lr
 80004b8:	2600      	movs	r6, #0
 80004ba:	b11d      	cbz	r5, 80004c4 <__udivmoddi4+0xa0>
 80004bc:	40d4      	lsrs	r4, r2
 80004be:	2300      	movs	r3, #0
 80004c0:	e9c5 4300 	strd	r4, r3, [r5]
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	b902      	cbnz	r2, 80004ce <__udivmoddi4+0xaa>
 80004cc:	deff      	udf	#255	; 0xff
 80004ce:	fab2 f282 	clz	r2, r2
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d150      	bne.n	8000578 <__udivmoddi4+0x154>
 80004d6:	1bcb      	subs	r3, r1, r7
 80004d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004dc:	fa1f f887 	uxth.w	r8, r7
 80004e0:	2601      	movs	r6, #1
 80004e2:	fbb3 fcfe 	udiv	ip, r3, lr
 80004e6:	0c21      	lsrs	r1, r4, #16
 80004e8:	fb0e 331c 	mls	r3, lr, ip, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb08 f30c 	mul.w	r3, r8, ip
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d907      	bls.n	8000508 <__udivmoddi4+0xe4>
 80004f8:	1879      	adds	r1, r7, r1
 80004fa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0xe2>
 8000500:	428b      	cmp	r3, r1
 8000502:	f200 80e9 	bhi.w	80006d8 <__udivmoddi4+0x2b4>
 8000506:	4684      	mov	ip, r0
 8000508:	1ac9      	subs	r1, r1, r3
 800050a:	b2a3      	uxth	r3, r4
 800050c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000510:	fb0e 1110 	mls	r1, lr, r0, r1
 8000514:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000518:	fb08 f800 	mul.w	r8, r8, r0
 800051c:	45a0      	cmp	r8, r4
 800051e:	d907      	bls.n	8000530 <__udivmoddi4+0x10c>
 8000520:	193c      	adds	r4, r7, r4
 8000522:	f100 33ff 	add.w	r3, r0, #4294967295
 8000526:	d202      	bcs.n	800052e <__udivmoddi4+0x10a>
 8000528:	45a0      	cmp	r8, r4
 800052a:	f200 80d9 	bhi.w	80006e0 <__udivmoddi4+0x2bc>
 800052e:	4618      	mov	r0, r3
 8000530:	eba4 0408 	sub.w	r4, r4, r8
 8000534:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000538:	e7bf      	b.n	80004ba <__udivmoddi4+0x96>
 800053a:	428b      	cmp	r3, r1
 800053c:	d909      	bls.n	8000552 <__udivmoddi4+0x12e>
 800053e:	2d00      	cmp	r5, #0
 8000540:	f000 80b1 	beq.w	80006a6 <__udivmoddi4+0x282>
 8000544:	2600      	movs	r6, #0
 8000546:	e9c5 0100 	strd	r0, r1, [r5]
 800054a:	4630      	mov	r0, r6
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	fab3 f683 	clz	r6, r3
 8000556:	2e00      	cmp	r6, #0
 8000558:	d14a      	bne.n	80005f0 <__udivmoddi4+0x1cc>
 800055a:	428b      	cmp	r3, r1
 800055c:	d302      	bcc.n	8000564 <__udivmoddi4+0x140>
 800055e:	4282      	cmp	r2, r0
 8000560:	f200 80b8 	bhi.w	80006d4 <__udivmoddi4+0x2b0>
 8000564:	1a84      	subs	r4, r0, r2
 8000566:	eb61 0103 	sbc.w	r1, r1, r3
 800056a:	2001      	movs	r0, #1
 800056c:	468c      	mov	ip, r1
 800056e:	2d00      	cmp	r5, #0
 8000570:	d0a8      	beq.n	80004c4 <__udivmoddi4+0xa0>
 8000572:	e9c5 4c00 	strd	r4, ip, [r5]
 8000576:	e7a5      	b.n	80004c4 <__udivmoddi4+0xa0>
 8000578:	f1c2 0320 	rsb	r3, r2, #32
 800057c:	fa20 f603 	lsr.w	r6, r0, r3
 8000580:	4097      	lsls	r7, r2
 8000582:	fa01 f002 	lsl.w	r0, r1, r2
 8000586:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800058a:	40d9      	lsrs	r1, r3
 800058c:	4330      	orrs	r0, r6
 800058e:	0c03      	lsrs	r3, r0, #16
 8000590:	fbb1 f6fe 	udiv	r6, r1, lr
 8000594:	fa1f f887 	uxth.w	r8, r7
 8000598:	fb0e 1116 	mls	r1, lr, r6, r1
 800059c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a0:	fb06 f108 	mul.w	r1, r6, r8
 80005a4:	4299      	cmp	r1, r3
 80005a6:	fa04 f402 	lsl.w	r4, r4, r2
 80005aa:	d909      	bls.n	80005c0 <__udivmoddi4+0x19c>
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	f106 3cff 	add.w	ip, r6, #4294967295
 80005b2:	f080 808d 	bcs.w	80006d0 <__udivmoddi4+0x2ac>
 80005b6:	4299      	cmp	r1, r3
 80005b8:	f240 808a 	bls.w	80006d0 <__udivmoddi4+0x2ac>
 80005bc:	3e02      	subs	r6, #2
 80005be:	443b      	add	r3, r7
 80005c0:	1a5b      	subs	r3, r3, r1
 80005c2:	b281      	uxth	r1, r0
 80005c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80005c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb00 f308 	mul.w	r3, r0, r8
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d907      	bls.n	80005e8 <__udivmoddi4+0x1c4>
 80005d8:	1879      	adds	r1, r7, r1
 80005da:	f100 3cff 	add.w	ip, r0, #4294967295
 80005de:	d273      	bcs.n	80006c8 <__udivmoddi4+0x2a4>
 80005e0:	428b      	cmp	r3, r1
 80005e2:	d971      	bls.n	80006c8 <__udivmoddi4+0x2a4>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4439      	add	r1, r7
 80005e8:	1acb      	subs	r3, r1, r3
 80005ea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ee:	e778      	b.n	80004e2 <__udivmoddi4+0xbe>
 80005f0:	f1c6 0c20 	rsb	ip, r6, #32
 80005f4:	fa03 f406 	lsl.w	r4, r3, r6
 80005f8:	fa22 f30c 	lsr.w	r3, r2, ip
 80005fc:	431c      	orrs	r4, r3
 80005fe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000602:	fa01 f306 	lsl.w	r3, r1, r6
 8000606:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800060a:	fa21 f10c 	lsr.w	r1, r1, ip
 800060e:	431f      	orrs	r7, r3
 8000610:	0c3b      	lsrs	r3, r7, #16
 8000612:	fbb1 f9fe 	udiv	r9, r1, lr
 8000616:	fa1f f884 	uxth.w	r8, r4
 800061a:	fb0e 1119 	mls	r1, lr, r9, r1
 800061e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000622:	fb09 fa08 	mul.w	sl, r9, r8
 8000626:	458a      	cmp	sl, r1
 8000628:	fa02 f206 	lsl.w	r2, r2, r6
 800062c:	fa00 f306 	lsl.w	r3, r0, r6
 8000630:	d908      	bls.n	8000644 <__udivmoddi4+0x220>
 8000632:	1861      	adds	r1, r4, r1
 8000634:	f109 30ff 	add.w	r0, r9, #4294967295
 8000638:	d248      	bcs.n	80006cc <__udivmoddi4+0x2a8>
 800063a:	458a      	cmp	sl, r1
 800063c:	d946      	bls.n	80006cc <__udivmoddi4+0x2a8>
 800063e:	f1a9 0902 	sub.w	r9, r9, #2
 8000642:	4421      	add	r1, r4
 8000644:	eba1 010a 	sub.w	r1, r1, sl
 8000648:	b2bf      	uxth	r7, r7
 800064a:	fbb1 f0fe 	udiv	r0, r1, lr
 800064e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000652:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000656:	fb00 f808 	mul.w	r8, r0, r8
 800065a:	45b8      	cmp	r8, r7
 800065c:	d907      	bls.n	800066e <__udivmoddi4+0x24a>
 800065e:	19e7      	adds	r7, r4, r7
 8000660:	f100 31ff 	add.w	r1, r0, #4294967295
 8000664:	d22e      	bcs.n	80006c4 <__udivmoddi4+0x2a0>
 8000666:	45b8      	cmp	r8, r7
 8000668:	d92c      	bls.n	80006c4 <__udivmoddi4+0x2a0>
 800066a:	3802      	subs	r0, #2
 800066c:	4427      	add	r7, r4
 800066e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000672:	eba7 0708 	sub.w	r7, r7, r8
 8000676:	fba0 8902 	umull	r8, r9, r0, r2
 800067a:	454f      	cmp	r7, r9
 800067c:	46c6      	mov	lr, r8
 800067e:	4649      	mov	r1, r9
 8000680:	d31a      	bcc.n	80006b8 <__udivmoddi4+0x294>
 8000682:	d017      	beq.n	80006b4 <__udivmoddi4+0x290>
 8000684:	b15d      	cbz	r5, 800069e <__udivmoddi4+0x27a>
 8000686:	ebb3 020e 	subs.w	r2, r3, lr
 800068a:	eb67 0701 	sbc.w	r7, r7, r1
 800068e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000692:	40f2      	lsrs	r2, r6
 8000694:	ea4c 0202 	orr.w	r2, ip, r2
 8000698:	40f7      	lsrs	r7, r6
 800069a:	e9c5 2700 	strd	r2, r7, [r5]
 800069e:	2600      	movs	r6, #0
 80006a0:	4631      	mov	r1, r6
 80006a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a6:	462e      	mov	r6, r5
 80006a8:	4628      	mov	r0, r5
 80006aa:	e70b      	b.n	80004c4 <__udivmoddi4+0xa0>
 80006ac:	4606      	mov	r6, r0
 80006ae:	e6e9      	b.n	8000484 <__udivmoddi4+0x60>
 80006b0:	4618      	mov	r0, r3
 80006b2:	e6fd      	b.n	80004b0 <__udivmoddi4+0x8c>
 80006b4:	4543      	cmp	r3, r8
 80006b6:	d2e5      	bcs.n	8000684 <__udivmoddi4+0x260>
 80006b8:	ebb8 0e02 	subs.w	lr, r8, r2
 80006bc:	eb69 0104 	sbc.w	r1, r9, r4
 80006c0:	3801      	subs	r0, #1
 80006c2:	e7df      	b.n	8000684 <__udivmoddi4+0x260>
 80006c4:	4608      	mov	r0, r1
 80006c6:	e7d2      	b.n	800066e <__udivmoddi4+0x24a>
 80006c8:	4660      	mov	r0, ip
 80006ca:	e78d      	b.n	80005e8 <__udivmoddi4+0x1c4>
 80006cc:	4681      	mov	r9, r0
 80006ce:	e7b9      	b.n	8000644 <__udivmoddi4+0x220>
 80006d0:	4666      	mov	r6, ip
 80006d2:	e775      	b.n	80005c0 <__udivmoddi4+0x19c>
 80006d4:	4630      	mov	r0, r6
 80006d6:	e74a      	b.n	800056e <__udivmoddi4+0x14a>
 80006d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80006dc:	4439      	add	r1, r7
 80006de:	e713      	b.n	8000508 <__udivmoddi4+0xe4>
 80006e0:	3802      	subs	r0, #2
 80006e2:	443c      	add	r4, r7
 80006e4:	e724      	b.n	8000530 <__udivmoddi4+0x10c>
 80006e6:	bf00      	nop

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006f0:	ed2d 8b02 	vpush	{d8}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f000 fd93 	bl	8001220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f929 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 fadf 	bl	8000cc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000702:	f000 fab3 	bl	8000c6c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000706:	f000 f98b 	bl	8000a20 <MX_TIM1_Init>
  MX_TIM2_Init();
 800070a:	f000 f9e1 	bl	8000ad0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800070e:	f000 fa2b 	bl	8000b68 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	// ***open interrupt****
	HAL_TIM_Base_Start_IT(&htim2);
 8000712:	487a      	ldr	r0, [pc, #488]	; (80008fc <main+0x210>)
 8000714:	f001 fdc4 	bl	80022a0 <HAL_TIM_Base_Start_IT>

	// ***open module QEI for read encoder***
	// TIM1->CNT : read counter of timer1 (encoder)
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000718:	213c      	movs	r1, #60	; 0x3c
 800071a:	4879      	ldr	r0, [pc, #484]	; (8000900 <main+0x214>)
 800071c:	f001 ffd2 	bl	80026c4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim3);
 8000720:	4878      	ldr	r0, [pc, #480]	; (8000904 <main+0x218>)
 8000722:	f001 fd63 	bl	80021ec <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000726:	2100      	movs	r1, #0
 8000728:	4876      	ldr	r0, [pc, #472]	; (8000904 <main+0x218>)
 800072a:	f001 fe75 	bl	8002418 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800072e:	2104      	movs	r1, #4
 8000730:	4874      	ldr	r0, [pc, #464]	; (8000904 <main+0x218>)
 8000732:	f001 fe71 	bl	8002418 <HAL_TIM_PWM_Start>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (micros() - Timestamp >= 1000)
 8000736:	f000 fba3 	bl	8000e80 <micros>
 800073a:	4b73      	ldr	r3, [pc, #460]	; (8000908 <main+0x21c>)
 800073c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000740:	1a84      	subs	r4, r0, r2
 8000742:	eb61 0503 	sbc.w	r5, r1, r3
 8000746:	f240 32e7 	movw	r2, #999	; 0x3e7
 800074a:	f04f 0300 	mov.w	r3, #0
 800074e:	42ab      	cmp	r3, r5
 8000750:	bf08      	it	eq
 8000752:	42a2      	cmpeq	r2, r4
 8000754:	f080 80a5 	bcs.w	80008a2 <main+0x1b6>
		{
			Timestamp = micros();
 8000758:	f000 fb92 	bl	8000e80 <micros>
 800075c:	4602      	mov	r2, r0
 800075e:	460b      	mov	r3, r1
 8000760:	4969      	ldr	r1, [pc, #420]	; (8000908 <main+0x21c>)
 8000762:	e9c1 2300 	strd	r2, r3, [r1]
			rpm = (EncoderVel * 60) / (12 * 64 * 4);
 8000766:	4b69      	ldr	r3, [pc, #420]	; (800090c <main+0x220>)
 8000768:	edd3 7a00 	vldr	s15, [r3]
 800076c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8000910 <main+0x224>
 8000770:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000774:	eddf 6a67 	vldr	s13, [pc, #412]	; 8000914 <main+0x228>
 8000778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800077c:	4b66      	ldr	r3, [pc, #408]	; (8000918 <main+0x22c>)
 800077e:	edc3 7a00 	vstr	s15, [r3]
			error = Setrpm - rpm;
 8000782:	4b66      	ldr	r3, [pc, #408]	; (800091c <main+0x230>)
 8000784:	ed93 7a00 	vldr	s14, [r3]
 8000788:	4b63      	ldr	r3, [pc, #396]	; (8000918 <main+0x22c>)
 800078a:	edd3 7a00 	vldr	s15, [r3]
 800078e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000792:	4b63      	ldr	r3, [pc, #396]	; (8000920 <main+0x234>)
 8000794:	edc3 7a00 	vstr	s15, [r3]
			total_error += error;
 8000798:	4b62      	ldr	r3, [pc, #392]	; (8000924 <main+0x238>)
 800079a:	ed93 7a00 	vldr	s14, [r3]
 800079e:	4b60      	ldr	r3, [pc, #384]	; (8000920 <main+0x234>)
 80007a0:	edd3 7a00 	vldr	s15, [r3]
 80007a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007a8:	4b5e      	ldr	r3, [pc, #376]	; (8000924 <main+0x238>)
 80007aa:	edc3 7a00 	vstr	s15, [r3]
			PID = (Kp * error) + (Ki * total_error) + (Kd * (error - error_pre));
 80007ae:	4b5e      	ldr	r3, [pc, #376]	; (8000928 <main+0x23c>)
 80007b0:	ed93 7a00 	vldr	s14, [r3]
 80007b4:	4b5a      	ldr	r3, [pc, #360]	; (8000920 <main+0x234>)
 80007b6:	edd3 7a00 	vldr	s15, [r3]
 80007ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007be:	4b5b      	ldr	r3, [pc, #364]	; (800092c <main+0x240>)
 80007c0:	edd3 6a00 	vldr	s13, [r3]
 80007c4:	4b57      	ldr	r3, [pc, #348]	; (8000924 <main+0x238>)
 80007c6:	edd3 7a00 	vldr	s15, [r3]
 80007ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80007d2:	4b53      	ldr	r3, [pc, #332]	; (8000920 <main+0x234>)
 80007d4:	edd3 6a00 	vldr	s13, [r3]
 80007d8:	4b55      	ldr	r3, [pc, #340]	; (8000930 <main+0x244>)
 80007da:	edd3 7a00 	vldr	s15, [r3]
 80007de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80007e2:	4b54      	ldr	r3, [pc, #336]	; (8000934 <main+0x248>)
 80007e4:	edd3 7a00 	vldr	s15, [r3]
 80007e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007f0:	4b51      	ldr	r3, [pc, #324]	; (8000938 <main+0x24c>)
 80007f2:	edc3 7a00 	vstr	s15, [r3]
			error_pre = error;
 80007f6:	4b4a      	ldr	r3, [pc, #296]	; (8000920 <main+0x234>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a4d      	ldr	r2, [pc, #308]	; (8000930 <main+0x244>)
 80007fc:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWMOut_forward);
 80007fe:	4b41      	ldr	r3, [pc, #260]	; (8000904 <main+0x218>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a4e      	ldr	r2, [pc, #312]	; (800093c <main+0x250>)
 8000804:	6812      	ldr	r2, [r2, #0]
 8000806:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWMOut_reverse);
 8000808:	4b3e      	ldr	r3, [pc, #248]	; (8000904 <main+0x218>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a4c      	ldr	r2, [pc, #304]	; (8000940 <main+0x254>)
 800080e:	6812      	ldr	r2, [r2, #0]
 8000810:	639a      	str	r2, [r3, #56]	; 0x38

			if (Setrpm < 0)
 8000812:	4b42      	ldr	r3, [pc, #264]	; (800091c <main+0x230>)
 8000814:	edd3 7a00 	vldr	s15, [r3]
 8000818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800081c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000820:	d514      	bpl.n	800084c <main+0x160>
			{
				PWMOut_reverse -= PID;
 8000822:	4b47      	ldr	r3, [pc, #284]	; (8000940 <main+0x254>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	ee07 3a90 	vmov	s15, r3
 800082a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800082e:	4b42      	ldr	r3, [pc, #264]	; (8000938 <main+0x24c>)
 8000830:	edd3 7a00 	vldr	s15, [r3]
 8000834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800083c:	ee17 2a90 	vmov	r2, s15
 8000840:	4b3f      	ldr	r3, [pc, #252]	; (8000940 <main+0x254>)
 8000842:	601a      	str	r2, [r3, #0]
				PWMOut_forward = 0;
 8000844:	4b3d      	ldr	r3, [pc, #244]	; (800093c <main+0x250>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	e02a      	b.n	80008a2 <main+0x1b6>
			}

			else if (Setrpm > 0)
 800084c:	4b33      	ldr	r3, [pc, #204]	; (800091c <main+0x230>)
 800084e:	edd3 7a00 	vldr	s15, [r3]
 8000852:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800085a:	dd14      	ble.n	8000886 <main+0x19a>
			{
				PWMOut_forward += PID;
 800085c:	4b37      	ldr	r3, [pc, #220]	; (800093c <main+0x250>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000868:	4b33      	ldr	r3, [pc, #204]	; (8000938 <main+0x24c>)
 800086a:	edd3 7a00 	vldr	s15, [r3]
 800086e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000876:	ee17 2a90 	vmov	r2, s15
 800087a:	4b30      	ldr	r3, [pc, #192]	; (800093c <main+0x250>)
 800087c:	601a      	str	r2, [r3, #0]
				PWMOut_reverse = 0;
 800087e:	4b30      	ldr	r3, [pc, #192]	; (8000940 <main+0x254>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	e00d      	b.n	80008a2 <main+0x1b6>
			}

			else if (Setrpm == 0)
 8000886:	4b25      	ldr	r3, [pc, #148]	; (800091c <main+0x230>)
 8000888:	edd3 7a00 	vldr	s15, [r3]
 800088c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000894:	d105      	bne.n	80008a2 <main+0x1b6>
			{
				PWMOut_forward = 0;
 8000896:	4b29      	ldr	r3, [pc, #164]	; (800093c <main+0x250>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
				PWMOut_reverse = 0;
 800089c:	4b28      	ldr	r3, [pc, #160]	; (8000940 <main+0x254>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			}
		}
		if (micros() - Timestamp_Encoder >= 100)
 80008a2:	f000 faed 	bl	8000e80 <micros>
 80008a6:	4b27      	ldr	r3, [pc, #156]	; (8000944 <main+0x258>)
 80008a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ac:	ebb0 0802 	subs.w	r8, r0, r2
 80008b0:	eb61 0903 	sbc.w	r9, r1, r3
 80008b4:	f1b9 0f00 	cmp.w	r9, #0
 80008b8:	bf08      	it	eq
 80008ba:	f1b8 0f64 	cmpeq.w	r8, #100	; 0x64
 80008be:	f4ff af3a 	bcc.w	8000736 <main+0x4a>
		{
			Timestamp_Encoder = micros();
 80008c2:	f000 fadd 	bl	8000e80 <micros>
 80008c6:	4602      	mov	r2, r0
 80008c8:	460b      	mov	r3, r1
 80008ca:	491e      	ldr	r1, [pc, #120]	; (8000944 <main+0x258>)
 80008cc:	e9c1 2300 	strd	r2, r3, [r1]
			EncoderVel = (EncoderVel * 4099 + EncoderVelocity_Update()) / 4100;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <main+0x220>)
 80008d2:	edd3 7a00 	vldr	s15, [r3]
 80008d6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000948 <main+0x25c>
 80008da:	ee27 8a87 	vmul.f32	s16, s15, s14
 80008de:	f000 fa5f 	bl	8000da0 <EncoderVelocity_Update>
 80008e2:	eef0 7a40 	vmov.f32	s15, s0
 80008e6:	ee38 7a27 	vadd.f32	s14, s16, s15
 80008ea:	eddf 6a18 	vldr	s13, [pc, #96]	; 800094c <main+0x260>
 80008ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <main+0x220>)
 80008f4:	edc3 7a00 	vstr	s15, [r3]
		if (micros() - Timestamp >= 1000)
 80008f8:	e71d      	b.n	8000736 <main+0x4a>
 80008fa:	bf00      	nop
 80008fc:	20000114 	.word	0x20000114
 8000900:	200000cc 	.word	0x200000cc
 8000904:	20000084 	.word	0x20000084
 8000908:	20000048 	.word	0x20000048
 800090c:	20000038 	.word	0x20000038
 8000910:	42700000 	.word	0x42700000
 8000914:	45400000 	.word	0x45400000
 8000918:	2000005c 	.word	0x2000005c
 800091c:	20000058 	.word	0x20000058
 8000920:	2000006c 	.word	0x2000006c
 8000924:	20000074 	.word	0x20000074
 8000928:	20000000 	.word	0x20000000
 800092c:	20000060 	.word	0x20000060
 8000930:	20000070 	.word	0x20000070
 8000934:	20000064 	.word	0x20000064
 8000938:	20000068 	.word	0x20000068
 800093c:	20000050 	.word	0x20000050
 8000940:	20000054 	.word	0x20000054
 8000944:	20000040 	.word	0x20000040
 8000948:	45801800 	.word	0x45801800
 800094c:	45802000 	.word	0x45802000

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	; 0x50
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	2230      	movs	r2, #48	; 0x30
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f002 ff78 	bl	8003854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <SystemClock_Config+0xc8>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a26      	ldr	r2, [pc, #152]	; (8000a18 <SystemClock_Config+0xc8>)
 800097e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
 8000984:	4b24      	ldr	r3, [pc, #144]	; (8000a18 <SystemClock_Config+0xc8>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <SystemClock_Config+0xcc>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a20      	ldr	r2, [pc, #128]	; (8000a1c <SystemClock_Config+0xcc>)
 800099a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <SystemClock_Config+0xcc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ac:	2302      	movs	r3, #2
 80009ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b4:	2310      	movs	r3, #16
 80009b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b8:	2302      	movs	r3, #2
 80009ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009bc:	2300      	movs	r3, #0
 80009be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009c0:	2308      	movs	r3, #8
 80009c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80009c4:	2364      	movs	r3, #100	; 0x64
 80009c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009cc:	2304      	movs	r3, #4
 80009ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d0:	f107 0320 	add.w	r3, r7, #32
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 ff45 	bl	8001864 <HAL_RCC_OscConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009e0:	f000 fa68 	bl	8000eb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e4:	230f      	movs	r3, #15
 80009e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e8:	2302      	movs	r3, #2
 80009ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	2103      	movs	r1, #3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 f9a7 	bl	8001d54 <HAL_RCC_ClockConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a0c:	f000 fa52 	bl	8000eb4 <Error_Handler>
  }
}
 8000a10:	bf00      	nop
 8000a12:	3750      	adds	r7, #80	; 0x50
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000

08000a20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08c      	sub	sp, #48	; 0x30
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	2224      	movs	r2, #36	; 0x24
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 ff10 	bl	8003854 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <MX_TIM1_Init+0xa8>)
 8000a3e:	4a23      	ldr	r2, [pc, #140]	; (8000acc <MX_TIM1_Init+0xac>)
 8000a40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_TIM1_Init+0xa8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_TIM1_Init+0xa8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3071;
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_TIM1_Init+0xa8>)
 8000a50:	f640 32ff 	movw	r2, #3071	; 0xbff
 8000a54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_TIM1_Init+0xa8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_TIM1_Init+0xa8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_TIM1_Init+0xa8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a70:	2301      	movs	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a80:	2301      	movs	r3, #1
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	4619      	mov	r1, r3
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_TIM1_Init+0xa8>)
 8000a94:	f001 fd70 	bl	8002578 <HAL_TIM_Encoder_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000a9e:	f000 fa09 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_TIM1_Init+0xa8>)
 8000ab0:	f002 fc14 	bl	80032dc <HAL_TIMEx_MasterConfigSynchronization>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000aba:	f000 f9fb 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	3730      	adds	r7, #48	; 0x30
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200000cc 	.word	0x200000cc
 8000acc:	40010000 	.word	0x40010000

08000ad0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aec:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <MX_TIM2_Init+0x94>)
 8000aee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_TIM2_Init+0x94>)
 8000af6:	2263      	movs	r2, #99	; 0x63
 8000af8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_TIM2_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_TIM2_Init+0x94>)
 8000b02:	f04f 32ff 	mov.w	r2, #4294967295
 8000b06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_TIM2_Init+0x94>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_TIM2_Init+0x94>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b14:	4813      	ldr	r0, [pc, #76]	; (8000b64 <MX_TIM2_Init+0x94>)
 8000b16:	f001 fb19 	bl	800214c <HAL_TIM_Base_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b20:	f000 f9c8 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <MX_TIM2_Init+0x94>)
 8000b32:	f002 f81b 	bl	8002b6c <HAL_TIM_ConfigClockSource>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b3c:	f000 f9ba 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b40:	2300      	movs	r3, #0
 8000b42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b48:	463b      	mov	r3, r7
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_TIM2_Init+0x94>)
 8000b4e:	f002 fbc5 	bl	80032dc <HAL_TIMEx_MasterConfigSynchronization>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b58:	f000 f9ac 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000114 	.word	0x20000114

08000b68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	; 0x38
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
 8000b94:	615a      	str	r2, [r3, #20]
 8000b96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b98:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <MX_TIM3_Init+0xfc>)
 8000b9a:	4a33      	ldr	r2, [pc, #204]	; (8000c68 <MX_TIM3_Init+0x100>)
 8000b9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b9e:	4b31      	ldr	r3, [pc, #196]	; (8000c64 <MX_TIM3_Init+0xfc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba4:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <MX_TIM3_Init+0xfc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000baa:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <MX_TIM3_Init+0xfc>)
 8000bac:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb2:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <MX_TIM3_Init+0xfc>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <MX_TIM3_Init+0xfc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bbe:	4829      	ldr	r0, [pc, #164]	; (8000c64 <MX_TIM3_Init+0xfc>)
 8000bc0:	f001 fac4 	bl	800214c <HAL_TIM_Base_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bca:	f000 f973 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4822      	ldr	r0, [pc, #136]	; (8000c64 <MX_TIM3_Init+0xfc>)
 8000bdc:	f001 ffc6 	bl	8002b6c <HAL_TIM_ConfigClockSource>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000be6:	f000 f965 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bea:	481e      	ldr	r0, [pc, #120]	; (8000c64 <MX_TIM3_Init+0xfc>)
 8000bec:	f001 fbba 	bl	8002364 <HAL_TIM_PWM_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000bf6:	f000 f95d 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	4619      	mov	r1, r3
 8000c08:	4816      	ldr	r0, [pc, #88]	; (8000c64 <MX_TIM3_Init+0xfc>)
 8000c0a:	f002 fb67 	bl	80032dc <HAL_TIMEx_MasterConfigSynchronization>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c14:	f000 f94e 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c18:	2360      	movs	r3, #96	; 0x60
 8000c1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480d      	ldr	r0, [pc, #52]	; (8000c64 <MX_TIM3_Init+0xfc>)
 8000c30:	f001 fede 	bl	80029f0 <HAL_TIM_PWM_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c3a:	f000 f93b 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2204      	movs	r2, #4
 8000c42:	4619      	mov	r1, r3
 8000c44:	4807      	ldr	r0, [pc, #28]	; (8000c64 <MX_TIM3_Init+0xfc>)
 8000c46:	f001 fed3 	bl	80029f0 <HAL_TIM_PWM_ConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000c50:	f000 f930 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <MX_TIM3_Init+0xfc>)
 8000c56:	f000 f9e7 	bl	8001028 <HAL_TIM_MspPostInit>

}
 8000c5a:	bf00      	nop
 8000c5c:	3738      	adds	r7, #56	; 0x38
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000084 	.word	0x20000084
 8000c68:	40000400 	.word	0x40000400

08000c6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <MX_USART2_UART_Init+0x50>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	f002 fb9c 	bl	80033e0 <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cae:	f000 f901 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000015c 	.word	0x2000015c
 8000cbc:	40004400 	.word	0x40004400

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a2c      	ldr	r2, [pc, #176]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2120      	movs	r1, #32
 8000d4a:	4812      	ldr	r0, [pc, #72]	; (8000d94 <MX_GPIO_Init+0xd4>)
 8000d4c:	f000 fd70 	bl	8001830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_GPIO_Init+0xd8>)
 8000d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <MX_GPIO_Init+0xdc>)
 8000d66:	f000 fbdf 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d6a:	2320      	movs	r3, #32
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_GPIO_Init+0xd4>)
 8000d82:	f000 fbd1 	bl	8001528 <HAL_GPIO_Init>

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020000 	.word	0x40020000
 8000d98:	10210000 	.word	0x10210000
 8000d9c:	40020800 	.word	0x40020800

08000da0 <EncoderVelocity_Update>:
#define  MAX_SUBPOSITION_OVERFLOW 1536
#define  MAX_ENCODER_PERIOD 3072

// Angular velocity (dp/dt)
float EncoderVelocity_Update()
{
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	ed2d 8b02 	vpush	{d8}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <EncoderVelocity_Update+0x98>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db0:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8000db2:	f000 f865 	bl	8000e80 <micros>
 8000db6:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8000dba:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <EncoderVelocity_Update+0x9c>)
 8000dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dc4:	1a84      	subs	r4, r0, r2
 8000dc6:	eb61 0503 	sbc.w	r5, r1, r3
 8000dca:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <EncoderVelocity_Update+0xa0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000dde:	db04      	blt.n	8000dea <EncoderVelocity_Update+0x4a>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	e007      	b.n	8000dfa <EncoderVelocity_Update+0x5a>
	}

	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f513 6fc0 	cmn.w	r3, #1536	; 0x600
 8000df0:	dc03      	bgt.n	8000dfa <EncoderVelocity_Update+0x5a>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000df8:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8000dfa:	4a11      	ldr	r2, [pc, #68]	; (8000e40 <EncoderVelocity_Update+0xa0>)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8000e00:	490e      	ldr	r1, [pc, #56]	; (8000e3c <EncoderVelocity_Update+0x9c>)
 8000e02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e06:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <EncoderVelocity_Update+0xa4>)
 8000e0e:	fb02 f303 	mul.w	r3, r2, r3
 8000e12:	ee07 3a90 	vmov	s15, r3
 8000e16:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000e1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e1e:	f7ff faa3 	bl	8000368 <__aeabi_ul2f>
 8000e22:	ee07 0a10 	vmov	s14, r0
 8000e26:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 8000e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	ecbd 8b02 	vpop	{d8}
 8000e36:	bdb0      	pop	{r4, r5, r7, pc}
 8000e38:	200000cc 	.word	0x200000cc
 8000e3c:	20000078 	.word	0x20000078
 8000e40:	20000080 	.word	0x20000080
 8000e44:	000f4240 	.word	0x000f4240

08000e48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e48:	b4b0      	push	{r4, r5, r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d109      	bne.n	8000e6c <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5e:	f112 34ff 	adds.w	r4, r2, #4294967295
 8000e62:	f143 0500 	adc.w	r5, r3, #0
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e68:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bcb0      	pop	{r4, r5, r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000114 	.word	0x20000114
 8000e7c:	20000030 	.word	0x20000030

08000e80 <micros>:
uint64_t micros()
{
 8000e80:	b4b0      	push	{r4, r5, r7}
 8000e82:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <micros+0x2c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f04f 0100 	mov.w	r1, #0
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <micros+0x30>)
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	1884      	adds	r4, r0, r2
 8000e98:	eb41 0503 	adc.w	r5, r1, r3
 8000e9c:	4622      	mov	r2, r4
 8000e9e:	462b      	mov	r3, r5
}
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bcb0      	pop	{r4, r5, r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000114 	.word	0x20000114
 8000eb0:	20000030 	.word	0x20000030

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ebc:	e7fe      	b.n	8000ebc <Error_Handler+0x8>
	...

08000ec0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_MspInit+0x4c>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000efe:	2007      	movs	r0, #7
 8000f00:	f000 fad0 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800

08000f10 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12c      	bne.n	8000f8c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <HAL_TIM_Encoder_MspInit+0x8c>)
 8000f88:	f000 face 	bl	8001528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40010000 	.word	0x40010000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb0:	d116      	bne.n	8000fe0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <HAL_TIM_Base_MspInit+0x80>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_TIM_Base_MspInit+0x80>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <HAL_TIM_Base_MspInit+0x80>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	201c      	movs	r0, #28
 8000fd4:	f000 fa71 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fd8:	201c      	movs	r0, #28
 8000fda:	f000 fa8a 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fde:	e01a      	b.n	8001016 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <HAL_TIM_Base_MspInit+0x84>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d115      	bne.n	8001016 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_TIM_Base_MspInit+0x80>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <HAL_TIM_Base_MspInit+0x80>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_TIM_Base_MspInit+0x80>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	201d      	movs	r0, #29
 800100c:	f000 fa55 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001010:	201d      	movs	r0, #29
 8001012:	f000 fa6e 	bl	80014f2 <HAL_NVIC_EnableIRQ>
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40000400 	.word	0x40000400

08001028 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a12      	ldr	r2, [pc, #72]	; (8001090 <HAL_TIM_MspPostInit+0x68>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d11d      	bne.n	8001086 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_TIM_MspPostInit+0x6c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <HAL_TIM_MspPostInit+0x6c>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_TIM_MspPostInit+0x6c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001066:	23c0      	movs	r3, #192	; 0xc0
 8001068:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001076:	2302      	movs	r3, #2
 8001078:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <HAL_TIM_MspPostInit+0x70>)
 8001082:	f000 fa51 	bl	8001528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40000400 	.word	0x40000400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000

0800109c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <HAL_UART_MspInit+0x84>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d12b      	bne.n	8001116 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010f6:	230c      	movs	r3, #12
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001106:	2307      	movs	r3, #7
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_UART_MspInit+0x8c>)
 8001112:	f000 fa09 	bl	8001528 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40004400 	.word	0x40004400
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <NMI_Handler+0x4>

08001132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <MemManage_Handler+0x4>

0800113e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <UsageFault_Handler+0x4>

0800114a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001178:	f000 f8a4 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <TIM2_IRQHandler+0x10>)
 8001186:	f001 fb2b 	bl	80027e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000114 	.word	0x20000114

08001194 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <TIM3_IRQHandler+0x10>)
 800119a:	f001 fb21 	bl	80027e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000084 	.word	0x20000084

080011a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <SystemInit+0x20>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <SystemInit+0x20>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001204 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011d2:	490e      	ldr	r1, [pc, #56]	; (800120c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d4:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e8:	4c0b      	ldr	r4, [pc, #44]	; (8001218 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011f6:	f7ff ffd7 	bl	80011a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fa:	f002 fb07 	bl	800380c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fe:	f7ff fa75 	bl	80006ec <main>
  bx  lr    
 8001202:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001204:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800120c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001210:	080038a4 	.word	0x080038a4
  ldr r2, =_sbss
 8001214:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001218:	200001a4 	.word	0x200001a4

0800121c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC_IRQHandler>
	...

08001220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_Init+0x40>)
 800122a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_Init+0x40>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <HAL_Init+0x40>)
 8001236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_Init+0x40>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_Init+0x40>)
 8001242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f92b 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fe34 	bl	8000ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023c00 	.word	0x40023c00

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f943 	bl	800150e <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 f90b 	bl	80014ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000004 	.word	0x20000004
 80012bc:	2000000c 	.word	0x2000000c
 80012c0:	20000008 	.word	0x20000008

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	2000000c 	.word	0x2000000c
 80012e8:	200001a0 	.word	0x200001a0

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	200001a0 	.word	0x200001a0

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <__NVIC_EnableIRQ+0x38>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff8e 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff29 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff3e 	bl	800134c <__NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff8e 	bl	80013f8 <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5d 	bl	80013a4 <__NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff31 	bl	8001368 <__NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa2 	bl	8001460 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	e159      	b.n	80017f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001544:	2201      	movs	r2, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	429a      	cmp	r2, r3
 800155e:	f040 8148 	bne.w	80017f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	2b01      	cmp	r3, #1
 800156c:	d005      	beq.n	800157a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001576:	2b02      	cmp	r3, #2
 8001578:	d130      	bne.n	80015dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b0:	2201      	movs	r2, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 0201 	and.w	r2, r3, #1
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d017      	beq.n	8001618 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d123      	bne.n	800166c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	08da      	lsrs	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3208      	adds	r2, #8
 8001666:	69b9      	ldr	r1, [r7, #24]
 8001668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0203 	and.w	r2, r3, #3
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80a2 	beq.w	80017f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b57      	ldr	r3, [pc, #348]	; (8001810 <HAL_GPIO_Init+0x2e8>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a56      	ldr	r2, [pc, #344]	; (8001810 <HAL_GPIO_Init+0x2e8>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b54      	ldr	r3, [pc, #336]	; (8001810 <HAL_GPIO_Init+0x2e8>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ca:	4a52      	ldr	r2, [pc, #328]	; (8001814 <HAL_GPIO_Init+0x2ec>)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	220f      	movs	r2, #15
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a49      	ldr	r2, [pc, #292]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d019      	beq.n	800172a <HAL_GPIO_Init+0x202>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a48      	ldr	r2, [pc, #288]	; (800181c <HAL_GPIO_Init+0x2f4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0x1fe>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a47      	ldr	r2, [pc, #284]	; (8001820 <HAL_GPIO_Init+0x2f8>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d00d      	beq.n	8001722 <HAL_GPIO_Init+0x1fa>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a46      	ldr	r2, [pc, #280]	; (8001824 <HAL_GPIO_Init+0x2fc>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d007      	beq.n	800171e <HAL_GPIO_Init+0x1f6>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a45      	ldr	r2, [pc, #276]	; (8001828 <HAL_GPIO_Init+0x300>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d101      	bne.n	800171a <HAL_GPIO_Init+0x1f2>
 8001716:	2304      	movs	r3, #4
 8001718:	e008      	b.n	800172c <HAL_GPIO_Init+0x204>
 800171a:	2307      	movs	r3, #7
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x204>
 800171e:	2303      	movs	r3, #3
 8001720:	e004      	b.n	800172c <HAL_GPIO_Init+0x204>
 8001722:	2302      	movs	r3, #2
 8001724:	e002      	b.n	800172c <HAL_GPIO_Init+0x204>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_GPIO_Init+0x204>
 800172a:	2300      	movs	r3, #0
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	f002 0203 	and.w	r2, r2, #3
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	4093      	lsls	r3, r2
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800173c:	4935      	ldr	r1, [pc, #212]	; (8001814 <HAL_GPIO_Init+0x2ec>)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	3302      	adds	r3, #2
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800174a:	4b38      	ldr	r3, [pc, #224]	; (800182c <HAL_GPIO_Init+0x304>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800176e:	4a2f      	ldr	r2, [pc, #188]	; (800182c <HAL_GPIO_Init+0x304>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001774:	4b2d      	ldr	r3, [pc, #180]	; (800182c <HAL_GPIO_Init+0x304>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001798:	4a24      	ldr	r2, [pc, #144]	; (800182c <HAL_GPIO_Init+0x304>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <HAL_GPIO_Init+0x304>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017c2:	4a1a      	ldr	r2, [pc, #104]	; (800182c <HAL_GPIO_Init+0x304>)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_GPIO_Init+0x304>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017ec:	4a0f      	ldr	r2, [pc, #60]	; (800182c <HAL_GPIO_Init+0x304>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3301      	adds	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	f67f aea2 	bls.w	8001544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800
 8001814:	40013800 	.word	0x40013800
 8001818:	40020000 	.word	0x40020000
 800181c:	40020400 	.word	0x40020400
 8001820:	40020800 	.word	0x40020800
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40021000 	.word	0x40021000
 800182c:	40013c00 	.word	0x40013c00

08001830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
 800183c:	4613      	mov	r3, r2
 800183e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001840:	787b      	ldrb	r3, [r7, #1]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800184c:	e003      	b.n	8001856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	041a      	lsls	r2, r3, #16
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	619a      	str	r2, [r3, #24]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e264      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d075      	beq.n	800196e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001882:	4ba3      	ldr	r3, [pc, #652]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 030c 	and.w	r3, r3, #12
 800188a:	2b04      	cmp	r3, #4
 800188c:	d00c      	beq.n	80018a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188e:	4ba0      	ldr	r3, [pc, #640]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001896:	2b08      	cmp	r3, #8
 8001898:	d112      	bne.n	80018c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800189a:	4b9d      	ldr	r3, [pc, #628]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018a6:	d10b      	bne.n	80018c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	4b99      	ldr	r3, [pc, #612]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d05b      	beq.n	800196c <HAL_RCC_OscConfig+0x108>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d157      	bne.n	800196c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e23f      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c8:	d106      	bne.n	80018d8 <HAL_RCC_OscConfig+0x74>
 80018ca:	4b91      	ldr	r3, [pc, #580]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a90      	ldr	r2, [pc, #576]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e01d      	b.n	8001914 <HAL_RCC_OscConfig+0xb0>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0x98>
 80018e2:	4b8b      	ldr	r3, [pc, #556]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a8a      	ldr	r2, [pc, #552]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b88      	ldr	r3, [pc, #544]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a87      	ldr	r2, [pc, #540]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0xb0>
 80018fc:	4b84      	ldr	r3, [pc, #528]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a83      	ldr	r2, [pc, #524]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b81      	ldr	r3, [pc, #516]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a80      	ldr	r2, [pc, #512]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 800190e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fce6 	bl	80012ec <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fce2 	bl	80012ec <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e204      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b76      	ldr	r3, [pc, #472]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0xc0>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fcd2 	bl	80012ec <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff fcce 	bl	80012ec <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1f0      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	4b6c      	ldr	r3, [pc, #432]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0xe8>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d063      	beq.n	8001a42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800197a:	4b65      	ldr	r3, [pc, #404]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001986:	4b62      	ldr	r3, [pc, #392]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800198e:	2b08      	cmp	r3, #8
 8001990:	d11c      	bne.n	80019cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001992:	4b5f      	ldr	r3, [pc, #380]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d116      	bne.n	80019cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	4b5c      	ldr	r3, [pc, #368]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_RCC_OscConfig+0x152>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e1c4      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b6:	4b56      	ldr	r3, [pc, #344]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4952      	ldr	r1, [pc, #328]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	e03a      	b.n	8001a42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d020      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d4:	4b4f      	ldr	r3, [pc, #316]	; (8001b14 <HAL_RCC_OscConfig+0x2b0>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019da:	f7ff fc87 	bl	80012ec <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff fc83 	bl	80012ec <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1a5      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	4b46      	ldr	r3, [pc, #280]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a00:	4b43      	ldr	r3, [pc, #268]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4940      	ldr	r1, [pc, #256]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
 8001a14:	e015      	b.n	8001a42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a16:	4b3f      	ldr	r3, [pc, #252]	; (8001b14 <HAL_RCC_OscConfig+0x2b0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fc66 	bl	80012ec <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff fc62 	bl	80012ec <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e184      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d030      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d016      	beq.n	8001a84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a56:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <HAL_RCC_OscConfig+0x2b4>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fc46 	bl	80012ec <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff fc42 	bl	80012ec <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e164      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x200>
 8001a82:	e015      	b.n	8001ab0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <HAL_RCC_OscConfig+0x2b4>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fc2f 	bl	80012ec <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a92:	f7ff fc2b 	bl	80012ec <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e14d      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80a0 	beq.w	8001bfe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10f      	bne.n	8001aee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aea:	2301      	movs	r3, #1
 8001aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_OscConfig+0x2b8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d121      	bne.n	8001b3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_RCC_OscConfig+0x2b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <HAL_RCC_OscConfig+0x2b8>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b06:	f7ff fbf1 	bl	80012ec <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	e011      	b.n	8001b32 <HAL_RCC_OscConfig+0x2ce>
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	42470000 	.word	0x42470000
 8001b18:	42470e80 	.word	0x42470e80
 8001b1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b20:	f7ff fbe4 	bl	80012ec <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e106      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b32:	4b85      	ldr	r3, [pc, #532]	; (8001d48 <HAL_RCC_OscConfig+0x4e4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d106      	bne.n	8001b54 <HAL_RCC_OscConfig+0x2f0>
 8001b46:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4a:	4a80      	ldr	r2, [pc, #512]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6713      	str	r3, [r2, #112]	; 0x70
 8001b52:	e01c      	b.n	8001b8e <HAL_RCC_OscConfig+0x32a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b05      	cmp	r3, #5
 8001b5a:	d10c      	bne.n	8001b76 <HAL_RCC_OscConfig+0x312>
 8001b5c:	4b7b      	ldr	r3, [pc, #492]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b60:	4a7a      	ldr	r2, [pc, #488]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	6713      	str	r3, [r2, #112]	; 0x70
 8001b68:	4b78      	ldr	r3, [pc, #480]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	4a77      	ldr	r2, [pc, #476]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6713      	str	r3, [r2, #112]	; 0x70
 8001b74:	e00b      	b.n	8001b8e <HAL_RCC_OscConfig+0x32a>
 8001b76:	4b75      	ldr	r3, [pc, #468]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7a:	4a74      	ldr	r2, [pc, #464]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	6713      	str	r3, [r2, #112]	; 0x70
 8001b82:	4b72      	ldr	r3, [pc, #456]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b86:	4a71      	ldr	r2, [pc, #452]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001b88:	f023 0304 	bic.w	r3, r3, #4
 8001b8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d015      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b96:	f7ff fba9 	bl	80012ec <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7ff fba5 	bl	80012ec <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e0c5      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb4:	4b65      	ldr	r3, [pc, #404]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0ee      	beq.n	8001b9e <HAL_RCC_OscConfig+0x33a>
 8001bc0:	e014      	b.n	8001bec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fb93 	bl	80012ec <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7ff fb8f 	bl	80012ec <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e0af      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be0:	4b5a      	ldr	r3, [pc, #360]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1ee      	bne.n	8001bca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d105      	bne.n	8001bfe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf2:	4b56      	ldr	r3, [pc, #344]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a55      	ldr	r2, [pc, #340]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 809b 	beq.w	8001d3e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c08:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d05c      	beq.n	8001cce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d141      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1c:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <HAL_RCC_OscConfig+0x4ec>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fb63 	bl	80012ec <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7ff fb5f 	bl	80012ec <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e081      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3c:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69da      	ldr	r2, [r3, #28]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	019b      	lsls	r3, r3, #6
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	085b      	lsrs	r3, r3, #1
 8001c60:	3b01      	subs	r3, #1
 8001c62:	041b      	lsls	r3, r3, #16
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	061b      	lsls	r3, r3, #24
 8001c6c:	4937      	ldr	r1, [pc, #220]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c72:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <HAL_RCC_OscConfig+0x4ec>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fb38 	bl	80012ec <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff fb34 	bl	80012ec <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e056      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c92:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x41c>
 8001c9e:	e04e      	b.n	8001d3e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_RCC_OscConfig+0x4ec>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fb21 	bl	80012ec <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cae:	f7ff fb1d 	bl	80012ec <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e03f      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc0:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0x44a>
 8001ccc:	e037      	b.n	8001d3e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e032      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <HAL_RCC_OscConfig+0x4e8>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d028      	beq.n	8001d3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d121      	bne.n	8001d3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d11a      	bne.n	8001d3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d10:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d111      	bne.n	8001d3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	085b      	lsrs	r3, r3, #1
 8001d22:	3b01      	subs	r3, #1
 8001d24:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d107      	bne.n	8001d3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40007000 	.word	0x40007000
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	42470060 	.word	0x42470060

08001d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0cc      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d68:	4b68      	ldr	r3, [pc, #416]	; (8001f0c <HAL_RCC_ClockConfig+0x1b8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d90c      	bls.n	8001d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b65      	ldr	r3, [pc, #404]	; (8001f0c <HAL_RCC_ClockConfig+0x1b8>)
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b63      	ldr	r3, [pc, #396]	; (8001f0c <HAL_RCC_ClockConfig+0x1b8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0b8      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d020      	beq.n	8001dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001da8:	4b59      	ldr	r3, [pc, #356]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4a58      	ldr	r2, [pc, #352]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001db2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc0:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4a52      	ldr	r2, [pc, #328]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dcc:	4b50      	ldr	r3, [pc, #320]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	494d      	ldr	r1, [pc, #308]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d044      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d107      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d119      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e07f      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d003      	beq.n	8001e12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e12:	4b3f      	ldr	r3, [pc, #252]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e06f      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e22:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e067      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e32:	4b37      	ldr	r3, [pc, #220]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f023 0203 	bic.w	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4934      	ldr	r1, [pc, #208]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e44:	f7ff fa52 	bl	80012ec <HAL_GetTick>
 8001e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4c:	f7ff fa4e 	bl	80012ec <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e04f      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 020c 	and.w	r2, r3, #12
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d1eb      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e74:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <HAL_RCC_ClockConfig+0x1b8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d20c      	bcs.n	8001e9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <HAL_RCC_ClockConfig+0x1b8>)
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8a:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <HAL_RCC_ClockConfig+0x1b8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e032      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4916      	ldr	r1, [pc, #88]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d009      	beq.n	8001eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	490e      	ldr	r1, [pc, #56]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eda:	f000 f821 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	490a      	ldr	r1, [pc, #40]	; (8001f14 <HAL_RCC_ClockConfig+0x1c0>)
 8001eec:	5ccb      	ldrb	r3, [r1, r3]
 8001eee:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef2:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1c8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff f9b2 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023c00 	.word	0x40023c00
 8001f10:	40023800 	.word	0x40023800
 8001f14:	0800387c 	.word	0x0800387c
 8001f18:	20000004 	.word	0x20000004
 8001f1c:	20000008 	.word	0x20000008

08001f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	2300      	movs	r3, #0
 8001f32:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f38:	4b67      	ldr	r3, [pc, #412]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d00d      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x40>
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	f200 80bd 	bhi.w	80020c4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x34>
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d003      	beq.n	8001f5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f52:	e0b7      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f54:	4b61      	ldr	r3, [pc, #388]	; (80020dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f56:	60bb      	str	r3, [r7, #8]
       break;
 8001f58:	e0b7      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f5a:	4b61      	ldr	r3, [pc, #388]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001f5c:	60bb      	str	r3, [r7, #8]
      break;
 8001f5e:	e0b4      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f60:	4b5d      	ldr	r3, [pc, #372]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f6a:	4b5b      	ldr	r3, [pc, #364]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d04d      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f76:	4b58      	ldr	r3, [pc, #352]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	099b      	lsrs	r3, r3, #6
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f86:	f04f 0100 	mov.w	r1, #0
 8001f8a:	ea02 0800 	and.w	r8, r2, r0
 8001f8e:	ea03 0901 	and.w	r9, r3, r1
 8001f92:	4640      	mov	r0, r8
 8001f94:	4649      	mov	r1, r9
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	014b      	lsls	r3, r1, #5
 8001fa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fa4:	0142      	lsls	r2, r0, #5
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	ebb0 0008 	subs.w	r0, r0, r8
 8001fae:	eb61 0109 	sbc.w	r1, r1, r9
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	018b      	lsls	r3, r1, #6
 8001fbc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fc0:	0182      	lsls	r2, r0, #6
 8001fc2:	1a12      	subs	r2, r2, r0
 8001fc4:	eb63 0301 	sbc.w	r3, r3, r1
 8001fc8:	f04f 0000 	mov.w	r0, #0
 8001fcc:	f04f 0100 	mov.w	r1, #0
 8001fd0:	00d9      	lsls	r1, r3, #3
 8001fd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fd6:	00d0      	lsls	r0, r2, #3
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	eb12 0208 	adds.w	r2, r2, r8
 8001fe0:	eb43 0309 	adc.w	r3, r3, r9
 8001fe4:	f04f 0000 	mov.w	r0, #0
 8001fe8:	f04f 0100 	mov.w	r1, #0
 8001fec:	0259      	lsls	r1, r3, #9
 8001fee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ff2:	0250      	lsls	r0, r2, #9
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	461a      	mov	r2, r3
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	f7fe f9f6 	bl	80003f4 <__aeabi_uldivmod>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4613      	mov	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	e04a      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002012:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	099b      	lsrs	r3, r3, #6
 8002018:	461a      	mov	r2, r3
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	ea02 0400 	and.w	r4, r2, r0
 800202a:	ea03 0501 	and.w	r5, r3, r1
 800202e:	4620      	mov	r0, r4
 8002030:	4629      	mov	r1, r5
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	014b      	lsls	r3, r1, #5
 800203c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002040:	0142      	lsls	r2, r0, #5
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	1b00      	subs	r0, r0, r4
 8002048:	eb61 0105 	sbc.w	r1, r1, r5
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	018b      	lsls	r3, r1, #6
 8002056:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800205a:	0182      	lsls	r2, r0, #6
 800205c:	1a12      	subs	r2, r2, r0
 800205e:	eb63 0301 	sbc.w	r3, r3, r1
 8002062:	f04f 0000 	mov.w	r0, #0
 8002066:	f04f 0100 	mov.w	r1, #0
 800206a:	00d9      	lsls	r1, r3, #3
 800206c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002070:	00d0      	lsls	r0, r2, #3
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	1912      	adds	r2, r2, r4
 8002078:	eb45 0303 	adc.w	r3, r5, r3
 800207c:	f04f 0000 	mov.w	r0, #0
 8002080:	f04f 0100 	mov.w	r1, #0
 8002084:	0299      	lsls	r1, r3, #10
 8002086:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800208a:	0290      	lsls	r0, r2, #10
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	461a      	mov	r2, r3
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	f7fe f9aa 	bl	80003f4 <__aeabi_uldivmod>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4613      	mov	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	0c1b      	lsrs	r3, r3, #16
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	3301      	adds	r3, #1
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c0:	60bb      	str	r3, [r7, #8]
      break;
 80020c2:	e002      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020c6:	60bb      	str	r3, [r7, #8]
      break;
 80020c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ca:	68bb      	ldr	r3, [r7, #8]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	00f42400 	.word	0x00f42400
 80020e0:	007a1200 	.word	0x007a1200

080020e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000004 	.word	0x20000004

080020fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002100:	f7ff fff0 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 8002104:	4602      	mov	r2, r0
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	0a9b      	lsrs	r3, r3, #10
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	4903      	ldr	r1, [pc, #12]	; (8002120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002112:	5ccb      	ldrb	r3, [r1, r3]
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002118:	4618      	mov	r0, r3
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40023800 	.word	0x40023800
 8002120:	0800388c 	.word	0x0800388c

08002124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002128:	f7ff ffdc 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	0b5b      	lsrs	r3, r3, #13
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	4903      	ldr	r1, [pc, #12]	; (8002148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40023800 	.word	0x40023800
 8002148:	0800388c 	.word	0x0800388c

0800214c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e041      	b.n	80021e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7fe ff14 	bl	8000fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3304      	adds	r3, #4
 8002188:	4619      	mov	r1, r3
 800218a:	4610      	mov	r0, r2
 800218c:	f000 fdda 	bl	8002d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d001      	beq.n	8002204 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e03c      	b.n	800227e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a1e      	ldr	r2, [pc, #120]	; (800228c <HAL_TIM_Base_Start+0xa0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d018      	beq.n	8002248 <HAL_TIM_Base_Start+0x5c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221e:	d013      	beq.n	8002248 <HAL_TIM_Base_Start+0x5c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <HAL_TIM_Base_Start+0xa4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00e      	beq.n	8002248 <HAL_TIM_Base_Start+0x5c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a19      	ldr	r2, [pc, #100]	; (8002294 <HAL_TIM_Base_Start+0xa8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d009      	beq.n	8002248 <HAL_TIM_Base_Start+0x5c>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a17      	ldr	r2, [pc, #92]	; (8002298 <HAL_TIM_Base_Start+0xac>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d004      	beq.n	8002248 <HAL_TIM_Base_Start+0x5c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a16      	ldr	r2, [pc, #88]	; (800229c <HAL_TIM_Base_Start+0xb0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d111      	bne.n	800226c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b06      	cmp	r3, #6
 8002258:	d010      	beq.n	800227c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800226a:	e007      	b.n	800227c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40010000 	.word	0x40010000
 8002290:	40000400 	.word	0x40000400
 8002294:	40000800 	.word	0x40000800
 8002298:	40000c00 	.word	0x40000c00
 800229c:	40014000 	.word	0x40014000

080022a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d001      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e044      	b.n	8002342 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <HAL_TIM_Base_Start_IT+0xb0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d018      	beq.n	800230c <HAL_TIM_Base_Start_IT+0x6c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e2:	d013      	beq.n	800230c <HAL_TIM_Base_Start_IT+0x6c>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1a      	ldr	r2, [pc, #104]	; (8002354 <HAL_TIM_Base_Start_IT+0xb4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00e      	beq.n	800230c <HAL_TIM_Base_Start_IT+0x6c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a19      	ldr	r2, [pc, #100]	; (8002358 <HAL_TIM_Base_Start_IT+0xb8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d009      	beq.n	800230c <HAL_TIM_Base_Start_IT+0x6c>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a17      	ldr	r2, [pc, #92]	; (800235c <HAL_TIM_Base_Start_IT+0xbc>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d004      	beq.n	800230c <HAL_TIM_Base_Start_IT+0x6c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a16      	ldr	r2, [pc, #88]	; (8002360 <HAL_TIM_Base_Start_IT+0xc0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d111      	bne.n	8002330 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b06      	cmp	r3, #6
 800231c:	d010      	beq.n	8002340 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0201 	orr.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800232e:	e007      	b.n	8002340 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40010000 	.word	0x40010000
 8002354:	40000400 	.word	0x40000400
 8002358:	40000800 	.word	0x40000800
 800235c:	40000c00 	.word	0x40000c00
 8002360:	40014000 	.word	0x40014000

08002364 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e041      	b.n	80023fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f839 	bl	8002402 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3304      	adds	r3, #4
 80023a0:	4619      	mov	r1, r3
 80023a2:	4610      	mov	r0, r2
 80023a4:	f000 fcce 	bl	8002d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d109      	bne.n	800243c <HAL_TIM_PWM_Start+0x24>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	e022      	b.n	8002482 <HAL_TIM_PWM_Start+0x6a>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b04      	cmp	r3, #4
 8002440:	d109      	bne.n	8002456 <HAL_TIM_PWM_Start+0x3e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	bf14      	ite	ne
 800244e:	2301      	movne	r3, #1
 8002450:	2300      	moveq	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	e015      	b.n	8002482 <HAL_TIM_PWM_Start+0x6a>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b08      	cmp	r3, #8
 800245a:	d109      	bne.n	8002470 <HAL_TIM_PWM_Start+0x58>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	bf14      	ite	ne
 8002468:	2301      	movne	r3, #1
 800246a:	2300      	moveq	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	e008      	b.n	8002482 <HAL_TIM_PWM_Start+0x6a>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	bf14      	ite	ne
 800247c:	2301      	movne	r3, #1
 800247e:	2300      	moveq	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e068      	b.n	800255c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d104      	bne.n	800249a <HAL_TIM_PWM_Start+0x82>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002498:	e013      	b.n	80024c2 <HAL_TIM_PWM_Start+0xaa>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b04      	cmp	r3, #4
 800249e:	d104      	bne.n	80024aa <HAL_TIM_PWM_Start+0x92>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024a8:	e00b      	b.n	80024c2 <HAL_TIM_PWM_Start+0xaa>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d104      	bne.n	80024ba <HAL_TIM_PWM_Start+0xa2>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b8:	e003      	b.n	80024c2 <HAL_TIM_PWM_Start+0xaa>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2201      	movs	r2, #1
 80024c8:	6839      	ldr	r1, [r7, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fee0 	bl	8003290 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a23      	ldr	r2, [pc, #140]	; (8002564 <HAL_TIM_PWM_Start+0x14c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d107      	bne.n	80024ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <HAL_TIM_PWM_Start+0x14c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d018      	beq.n	8002526 <HAL_TIM_PWM_Start+0x10e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fc:	d013      	beq.n	8002526 <HAL_TIM_PWM_Start+0x10e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a19      	ldr	r2, [pc, #100]	; (8002568 <HAL_TIM_PWM_Start+0x150>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00e      	beq.n	8002526 <HAL_TIM_PWM_Start+0x10e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a17      	ldr	r2, [pc, #92]	; (800256c <HAL_TIM_PWM_Start+0x154>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_TIM_PWM_Start+0x10e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a16      	ldr	r2, [pc, #88]	; (8002570 <HAL_TIM_PWM_Start+0x158>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d004      	beq.n	8002526 <HAL_TIM_PWM_Start+0x10e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a14      	ldr	r2, [pc, #80]	; (8002574 <HAL_TIM_PWM_Start+0x15c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d111      	bne.n	800254a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b06      	cmp	r3, #6
 8002536:	d010      	beq.n	800255a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002548:	e007      	b.n	800255a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40010000 	.word	0x40010000
 8002568:	40000400 	.word	0x40000400
 800256c:	40000800 	.word	0x40000800
 8002570:	40000c00 	.word	0x40000c00
 8002574:	40014000 	.word	0x40014000

08002578 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e097      	b.n	80026bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d106      	bne.n	80025a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7fe fcb5 	bl	8000f10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2202      	movs	r2, #2
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025bc:	f023 0307 	bic.w	r3, r3, #7
 80025c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3304      	adds	r3, #4
 80025ca:	4619      	mov	r1, r3
 80025cc:	4610      	mov	r0, r2
 80025ce:	f000 fbb9 	bl	8002d44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025fa:	f023 0303 	bic.w	r3, r3, #3
 80025fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	4313      	orrs	r3, r2
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002618:	f023 030c 	bic.w	r3, r3, #12
 800261c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002624:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002628:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	4313      	orrs	r3, r2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	011a      	lsls	r2, r3, #4
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	031b      	lsls	r3, r3, #12
 8002648:	4313      	orrs	r3, r2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002656:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800265e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	4313      	orrs	r3, r2
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80026ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d110      	bne.n	8002716 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d102      	bne.n	8002700 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80026fa:	7b7b      	ldrb	r3, [r7, #13]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d001      	beq.n	8002704 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e069      	b.n	80027d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002714:	e031      	b.n	800277a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b04      	cmp	r3, #4
 800271a:	d110      	bne.n	800273e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800271c:	7bbb      	ldrb	r3, [r7, #14]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d102      	bne.n	8002728 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002722:	7b3b      	ldrb	r3, [r7, #12]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d001      	beq.n	800272c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e055      	b.n	80027d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800273c:	e01d      	b.n	800277a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d108      	bne.n	8002756 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002744:	7bbb      	ldrb	r3, [r7, #14]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d105      	bne.n	8002756 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800274a:	7b7b      	ldrb	r3, [r7, #13]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d102      	bne.n	8002756 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002750:	7b3b      	ldrb	r3, [r7, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d001      	beq.n	800275a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e03e      	b.n	80027d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2202      	movs	r2, #2
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2202      	movs	r2, #2
 8002766:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2202      	movs	r2, #2
 800276e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2202      	movs	r2, #2
 8002776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_TIM_Encoder_Start+0xc4>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b04      	cmp	r3, #4
 8002784:	d008      	beq.n	8002798 <HAL_TIM_Encoder_Start+0xd4>
 8002786:	e00f      	b.n	80027a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2201      	movs	r2, #1
 800278e:	2100      	movs	r1, #0
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fd7d 	bl	8003290 <TIM_CCxChannelCmd>
      break;
 8002796:	e016      	b.n	80027c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2201      	movs	r2, #1
 800279e:	2104      	movs	r1, #4
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fd75 	bl	8003290 <TIM_CCxChannelCmd>
      break;
 80027a6:	e00e      	b.n	80027c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2201      	movs	r2, #1
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fd6d 	bl	8003290 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2201      	movs	r2, #1
 80027bc:	2104      	movs	r1, #4
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fd66 	bl	8003290 <TIM_CCxChannelCmd>
      break;
 80027c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0201 	orr.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d122      	bne.n	800283c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b02      	cmp	r3, #2
 8002802:	d11b      	bne.n	800283c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0202 	mvn.w	r2, #2
 800280c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fa70 	bl	8002d08 <HAL_TIM_IC_CaptureCallback>
 8002828:	e005      	b.n	8002836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fa62 	bl	8002cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fa73 	bl	8002d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b04      	cmp	r3, #4
 8002848:	d122      	bne.n	8002890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b04      	cmp	r3, #4
 8002856:	d11b      	bne.n	8002890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0204 	mvn.w	r2, #4
 8002860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2202      	movs	r2, #2
 8002866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fa46 	bl	8002d08 <HAL_TIM_IC_CaptureCallback>
 800287c:	e005      	b.n	800288a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 fa38 	bl	8002cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fa49 	bl	8002d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b08      	cmp	r3, #8
 800289c:	d122      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d11b      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0208 	mvn.w	r2, #8
 80028b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2204      	movs	r2, #4
 80028ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fa1c 	bl	8002d08 <HAL_TIM_IC_CaptureCallback>
 80028d0:	e005      	b.n	80028de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fa0e 	bl	8002cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fa1f 	bl	8002d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2b10      	cmp	r3, #16
 80028f0:	d122      	bne.n	8002938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	2b10      	cmp	r3, #16
 80028fe:	d11b      	bne.n	8002938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0210 	mvn.w	r2, #16
 8002908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2208      	movs	r2, #8
 800290e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f9f2 	bl	8002d08 <HAL_TIM_IC_CaptureCallback>
 8002924:	e005      	b.n	8002932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f9e4 	bl	8002cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f9f5 	bl	8002d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b01      	cmp	r3, #1
 8002944:	d10e      	bne.n	8002964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d107      	bne.n	8002964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0201 	mvn.w	r2, #1
 800295c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe fa72 	bl	8000e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296e:	2b80      	cmp	r3, #128	; 0x80
 8002970:	d10e      	bne.n	8002990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297c:	2b80      	cmp	r3, #128	; 0x80
 800297e:	d107      	bne.n	8002990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fd1e 	bl	80033cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299a:	2b40      	cmp	r3, #64	; 0x40
 800299c:	d10e      	bne.n	80029bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d107      	bne.n	80029bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f9ba 	bl	8002d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b20      	cmp	r3, #32
 80029c8:	d10e      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d107      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0220 	mvn.w	r2, #32
 80029e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fce8 	bl	80033b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e0ac      	b.n	8002b64 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	f200 809f 	bhi.w	8002b58 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002a1a:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a20:	08002a55 	.word	0x08002a55
 8002a24:	08002b59 	.word	0x08002b59
 8002a28:	08002b59 	.word	0x08002b59
 8002a2c:	08002b59 	.word	0x08002b59
 8002a30:	08002a95 	.word	0x08002a95
 8002a34:	08002b59 	.word	0x08002b59
 8002a38:	08002b59 	.word	0x08002b59
 8002a3c:	08002b59 	.word	0x08002b59
 8002a40:	08002ad7 	.word	0x08002ad7
 8002a44:	08002b59 	.word	0x08002b59
 8002a48:	08002b59 	.word	0x08002b59
 8002a4c:	08002b59 	.word	0x08002b59
 8002a50:	08002b17 	.word	0x08002b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f9f2 	bl	8002e44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0208 	orr.w	r2, r2, #8
 8002a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0204 	bic.w	r2, r2, #4
 8002a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6999      	ldr	r1, [r3, #24]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	691a      	ldr	r2, [r3, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	619a      	str	r2, [r3, #24]
      break;
 8002a92:	e062      	b.n	8002b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fa38 	bl	8002f10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6999      	ldr	r1, [r3, #24]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	021a      	lsls	r2, r3, #8
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	619a      	str	r2, [r3, #24]
      break;
 8002ad4:	e041      	b.n	8002b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fa83 	bl	8002fe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69da      	ldr	r2, [r3, #28]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0208 	orr.w	r2, r2, #8
 8002af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69da      	ldr	r2, [r3, #28]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0204 	bic.w	r2, r2, #4
 8002b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69d9      	ldr	r1, [r3, #28]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	61da      	str	r2, [r3, #28]
      break;
 8002b14:	e021      	b.n	8002b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 facd 	bl	80030bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	69da      	ldr	r2, [r3, #28]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69da      	ldr	r2, [r3, #28]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69d9      	ldr	r1, [r3, #28]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	021a      	lsls	r2, r3, #8
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	61da      	str	r2, [r3, #28]
      break;
 8002b56:	e000      	b.n	8002b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002b58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_TIM_ConfigClockSource+0x18>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e0b3      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x180>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ba2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002baa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bbc:	d03e      	beq.n	8002c3c <HAL_TIM_ConfigClockSource+0xd0>
 8002bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc2:	f200 8087 	bhi.w	8002cd4 <HAL_TIM_ConfigClockSource+0x168>
 8002bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bca:	f000 8085 	beq.w	8002cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd2:	d87f      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x168>
 8002bd4:	2b70      	cmp	r3, #112	; 0x70
 8002bd6:	d01a      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0xa2>
 8002bd8:	2b70      	cmp	r3, #112	; 0x70
 8002bda:	d87b      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x168>
 8002bdc:	2b60      	cmp	r3, #96	; 0x60
 8002bde:	d050      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0x116>
 8002be0:	2b60      	cmp	r3, #96	; 0x60
 8002be2:	d877      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x168>
 8002be4:	2b50      	cmp	r3, #80	; 0x50
 8002be6:	d03c      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0xf6>
 8002be8:	2b50      	cmp	r3, #80	; 0x50
 8002bea:	d873      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x168>
 8002bec:	2b40      	cmp	r3, #64	; 0x40
 8002bee:	d058      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x136>
 8002bf0:	2b40      	cmp	r3, #64	; 0x40
 8002bf2:	d86f      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x168>
 8002bf4:	2b30      	cmp	r3, #48	; 0x30
 8002bf6:	d064      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x156>
 8002bf8:	2b30      	cmp	r3, #48	; 0x30
 8002bfa:	d86b      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x168>
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d060      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x156>
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d867      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x168>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d05c      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x156>
 8002c08:	2b10      	cmp	r3, #16
 8002c0a:	d05a      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c0c:	e062      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6899      	ldr	r1, [r3, #8]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f000 fb17 	bl	8003250 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	609a      	str	r2, [r3, #8]
      break;
 8002c3a:	e04e      	b.n	8002cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6899      	ldr	r1, [r3, #8]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f000 fb00 	bl	8003250 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c5e:	609a      	str	r2, [r3, #8]
      break;
 8002c60:	e03b      	b.n	8002cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6859      	ldr	r1, [r3, #4]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f000 fa74 	bl	800315c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2150      	movs	r1, #80	; 0x50
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 facd 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002c80:	e02b      	b.n	8002cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6859      	ldr	r1, [r3, #4]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f000 fa93 	bl	80031ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2160      	movs	r1, #96	; 0x60
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fabd 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002ca0:	e01b      	b.n	8002cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f000 fa54 	bl	800315c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2140      	movs	r1, #64	; 0x40
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 faad 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002cc0:	e00b      	b.n	8002cda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	f000 faa4 	bl	800321a <TIM_ITRx_SetConfig>
        break;
 8002cd2:	e002      	b.n	8002cda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cd4:	bf00      	nop
 8002cd6:	e000      	b.n	8002cda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a34      	ldr	r2, [pc, #208]	; (8002e28 <TIM_Base_SetConfig+0xe4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00f      	beq.n	8002d7c <TIM_Base_SetConfig+0x38>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d62:	d00b      	beq.n	8002d7c <TIM_Base_SetConfig+0x38>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a31      	ldr	r2, [pc, #196]	; (8002e2c <TIM_Base_SetConfig+0xe8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d007      	beq.n	8002d7c <TIM_Base_SetConfig+0x38>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a30      	ldr	r2, [pc, #192]	; (8002e30 <TIM_Base_SetConfig+0xec>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <TIM_Base_SetConfig+0x38>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a2f      	ldr	r2, [pc, #188]	; (8002e34 <TIM_Base_SetConfig+0xf0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d108      	bne.n	8002d8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a25      	ldr	r2, [pc, #148]	; (8002e28 <TIM_Base_SetConfig+0xe4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01b      	beq.n	8002dce <TIM_Base_SetConfig+0x8a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9c:	d017      	beq.n	8002dce <TIM_Base_SetConfig+0x8a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <TIM_Base_SetConfig+0xe8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d013      	beq.n	8002dce <TIM_Base_SetConfig+0x8a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <TIM_Base_SetConfig+0xec>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00f      	beq.n	8002dce <TIM_Base_SetConfig+0x8a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a20      	ldr	r2, [pc, #128]	; (8002e34 <TIM_Base_SetConfig+0xf0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00b      	beq.n	8002dce <TIM_Base_SetConfig+0x8a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a1f      	ldr	r2, [pc, #124]	; (8002e38 <TIM_Base_SetConfig+0xf4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d007      	beq.n	8002dce <TIM_Base_SetConfig+0x8a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <TIM_Base_SetConfig+0xf8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d003      	beq.n	8002dce <TIM_Base_SetConfig+0x8a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <TIM_Base_SetConfig+0xfc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d108      	bne.n	8002de0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <TIM_Base_SetConfig+0xe4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d103      	bne.n	8002e14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	615a      	str	r2, [r3, #20]
}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	40000400 	.word	0x40000400
 8002e30:	40000800 	.word	0x40000800
 8002e34:	40000c00 	.word	0x40000c00
 8002e38:	40014000 	.word	0x40014000
 8002e3c:	40014400 	.word	0x40014400
 8002e40:	40014800 	.word	0x40014800

08002e44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f023 0201 	bic.w	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0303 	bic.w	r3, r3, #3
 8002e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f023 0302 	bic.w	r3, r3, #2
 8002e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a1c      	ldr	r2, [pc, #112]	; (8002f0c <TIM_OC1_SetConfig+0xc8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d10c      	bne.n	8002eba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f023 0308 	bic.w	r3, r3, #8
 8002ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a13      	ldr	r2, [pc, #76]	; (8002f0c <TIM_OC1_SetConfig+0xc8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d111      	bne.n	8002ee6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	621a      	str	r2, [r3, #32]
}
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40010000 	.word	0x40010000

08002f10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f023 0210 	bic.w	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f023 0320 	bic.w	r3, r3, #32
 8002f5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	; (8002fe4 <TIM_OC2_SetConfig+0xd4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d10d      	bne.n	8002f8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <TIM_OC2_SetConfig+0xd4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d113      	bne.n	8002fbc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	621a      	str	r2, [r3, #32]
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40010000 	.word	0x40010000

08002fe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <TIM_OC3_SetConfig+0xd0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10d      	bne.n	8003062 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800304c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <TIM_OC3_SetConfig+0xd0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d113      	bne.n	8003092 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	621a      	str	r2, [r3, #32]
}
 80030ac:	bf00      	nop
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40010000 	.word	0x40010000

080030bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	031b      	lsls	r3, r3, #12
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a10      	ldr	r2, [pc, #64]	; (8003158 <TIM_OC4_SetConfig+0x9c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d109      	bne.n	8003130 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003122:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	019b      	lsls	r3, r3, #6
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	621a      	str	r2, [r3, #32]
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40010000 	.word	0x40010000

0800315c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f023 0201 	bic.w	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f023 030a 	bic.w	r3, r3, #10
 8003198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	621a      	str	r2, [r3, #32]
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b087      	sub	sp, #28
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f023 0210 	bic.w	r2, r3, #16
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	031b      	lsls	r3, r3, #12
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800321a:	b480      	push	{r7}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	f043 0307 	orr.w	r3, r3, #7
 800323c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	609a      	str	r2, [r3, #8]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800326a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	021a      	lsls	r2, r3, #8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	431a      	orrs	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4313      	orrs	r3, r2
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	609a      	str	r2, [r3, #8]
}
 8003284:	bf00      	nop
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	2201      	movs	r2, #1
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a1a      	ldr	r2, [r3, #32]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	401a      	ands	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a1a      	ldr	r2, [r3, #32]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	431a      	orrs	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e050      	b.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1c      	ldr	r2, [pc, #112]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d018      	beq.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003340:	d013      	beq.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a18      	ldr	r2, [pc, #96]	; (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00e      	beq.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a16      	ldr	r2, [pc, #88]	; (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d009      	beq.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d004      	beq.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a13      	ldr	r2, [pc, #76]	; (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d10c      	bne.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	4313      	orrs	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800
 80033b0:	40000c00 	.word	0x40000c00
 80033b4:	40014000 	.word	0x40014000

080033b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e03f      	b.n	8003472 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fd fe48 	bl	800109c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2224      	movs	r2, #36	; 0x24
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f829 	bl	800347c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800347c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003480:	b09f      	sub	sp, #124	; 0x7c
 8003482:	af00      	add	r7, sp, #0
 8003484:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003492:	68d9      	ldr	r1, [r3, #12]
 8003494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	ea40 0301 	orr.w	r3, r0, r1
 800349c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800349e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80034b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034c0:	f021 010c 	bic.w	r1, r1, #12
 80034c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ca:	430b      	orrs	r3, r1
 80034cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034da:	6999      	ldr	r1, [r3, #24]
 80034dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	ea40 0301 	orr.w	r3, r0, r1
 80034e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4bc5      	ldr	r3, [pc, #788]	; (8003800 <UART_SetConfig+0x384>)
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d004      	beq.n	80034fa <UART_SetConfig+0x7e>
 80034f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4bc3      	ldr	r3, [pc, #780]	; (8003804 <UART_SetConfig+0x388>)
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d103      	bne.n	8003502 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034fa:	f7fe fe13 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
 80034fe:	6778      	str	r0, [r7, #116]	; 0x74
 8003500:	e002      	b.n	8003508 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003502:	f7fe fdfb 	bl	80020fc <HAL_RCC_GetPCLK1Freq>
 8003506:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003510:	f040 80b6 	bne.w	8003680 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003516:	461c      	mov	r4, r3
 8003518:	f04f 0500 	mov.w	r5, #0
 800351c:	4622      	mov	r2, r4
 800351e:	462b      	mov	r3, r5
 8003520:	1891      	adds	r1, r2, r2
 8003522:	6439      	str	r1, [r7, #64]	; 0x40
 8003524:	415b      	adcs	r3, r3
 8003526:	647b      	str	r3, [r7, #68]	; 0x44
 8003528:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800352c:	1912      	adds	r2, r2, r4
 800352e:	eb45 0303 	adc.w	r3, r5, r3
 8003532:	f04f 0000 	mov.w	r0, #0
 8003536:	f04f 0100 	mov.w	r1, #0
 800353a:	00d9      	lsls	r1, r3, #3
 800353c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003540:	00d0      	lsls	r0, r2, #3
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	1911      	adds	r1, r2, r4
 8003548:	6639      	str	r1, [r7, #96]	; 0x60
 800354a:	416b      	adcs	r3, r5
 800354c:	667b      	str	r3, [r7, #100]	; 0x64
 800354e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	461a      	mov	r2, r3
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	1891      	adds	r1, r2, r2
 800355a:	63b9      	str	r1, [r7, #56]	; 0x38
 800355c:	415b      	adcs	r3, r3
 800355e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003564:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003568:	f7fc ff44 	bl	80003f4 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4ba5      	ldr	r3, [pc, #660]	; (8003808 <UART_SetConfig+0x38c>)
 8003572:	fba3 2302 	umull	r2, r3, r3, r2
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	011e      	lsls	r6, r3, #4
 800357a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800357c:	461c      	mov	r4, r3
 800357e:	f04f 0500 	mov.w	r5, #0
 8003582:	4622      	mov	r2, r4
 8003584:	462b      	mov	r3, r5
 8003586:	1891      	adds	r1, r2, r2
 8003588:	6339      	str	r1, [r7, #48]	; 0x30
 800358a:	415b      	adcs	r3, r3
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
 800358e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003592:	1912      	adds	r2, r2, r4
 8003594:	eb45 0303 	adc.w	r3, r5, r3
 8003598:	f04f 0000 	mov.w	r0, #0
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	00d9      	lsls	r1, r3, #3
 80035a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035a6:	00d0      	lsls	r0, r2, #3
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	1911      	adds	r1, r2, r4
 80035ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80035b0:	416b      	adcs	r3, r5
 80035b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	461a      	mov	r2, r3
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	1891      	adds	r1, r2, r2
 80035c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80035c2:	415b      	adcs	r3, r3
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80035ce:	f7fc ff11 	bl	80003f4 <__aeabi_uldivmod>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4b8c      	ldr	r3, [pc, #560]	; (8003808 <UART_SetConfig+0x38c>)
 80035d8:	fba3 1302 	umull	r1, r3, r3, r2
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	2164      	movs	r1, #100	; 0x64
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	3332      	adds	r3, #50	; 0x32
 80035ea:	4a87      	ldr	r2, [pc, #540]	; (8003808 <UART_SetConfig+0x38c>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035f8:	441e      	add	r6, r3
 80035fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035fc:	4618      	mov	r0, r3
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	1894      	adds	r4, r2, r2
 8003608:	623c      	str	r4, [r7, #32]
 800360a:	415b      	adcs	r3, r3
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
 800360e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003612:	1812      	adds	r2, r2, r0
 8003614:	eb41 0303 	adc.w	r3, r1, r3
 8003618:	f04f 0400 	mov.w	r4, #0
 800361c:	f04f 0500 	mov.w	r5, #0
 8003620:	00dd      	lsls	r5, r3, #3
 8003622:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003626:	00d4      	lsls	r4, r2, #3
 8003628:	4622      	mov	r2, r4
 800362a:	462b      	mov	r3, r5
 800362c:	1814      	adds	r4, r2, r0
 800362e:	653c      	str	r4, [r7, #80]	; 0x50
 8003630:	414b      	adcs	r3, r1
 8003632:	657b      	str	r3, [r7, #84]	; 0x54
 8003634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	461a      	mov	r2, r3
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	1891      	adds	r1, r2, r2
 8003640:	61b9      	str	r1, [r7, #24]
 8003642:	415b      	adcs	r3, r3
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800364a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800364e:	f7fc fed1 	bl	80003f4 <__aeabi_uldivmod>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4b6c      	ldr	r3, [pc, #432]	; (8003808 <UART_SetConfig+0x38c>)
 8003658:	fba3 1302 	umull	r1, r3, r3, r2
 800365c:	095b      	lsrs	r3, r3, #5
 800365e:	2164      	movs	r1, #100	; 0x64
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	3332      	adds	r3, #50	; 0x32
 800366a:	4a67      	ldr	r2, [pc, #412]	; (8003808 <UART_SetConfig+0x38c>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	f003 0207 	and.w	r2, r3, #7
 8003676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4432      	add	r2, r6
 800367c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800367e:	e0b9      	b.n	80037f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003682:	461c      	mov	r4, r3
 8003684:	f04f 0500 	mov.w	r5, #0
 8003688:	4622      	mov	r2, r4
 800368a:	462b      	mov	r3, r5
 800368c:	1891      	adds	r1, r2, r2
 800368e:	6139      	str	r1, [r7, #16]
 8003690:	415b      	adcs	r3, r3
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003698:	1912      	adds	r2, r2, r4
 800369a:	eb45 0303 	adc.w	r3, r5, r3
 800369e:	f04f 0000 	mov.w	r0, #0
 80036a2:	f04f 0100 	mov.w	r1, #0
 80036a6:	00d9      	lsls	r1, r3, #3
 80036a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036ac:	00d0      	lsls	r0, r2, #3
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	eb12 0804 	adds.w	r8, r2, r4
 80036b6:	eb43 0905 	adc.w	r9, r3, r5
 80036ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4618      	mov	r0, r3
 80036c0:	f04f 0100 	mov.w	r1, #0
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	008b      	lsls	r3, r1, #2
 80036ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036d2:	0082      	lsls	r2, r0, #2
 80036d4:	4640      	mov	r0, r8
 80036d6:	4649      	mov	r1, r9
 80036d8:	f7fc fe8c 	bl	80003f4 <__aeabi_uldivmod>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4b49      	ldr	r3, [pc, #292]	; (8003808 <UART_SetConfig+0x38c>)
 80036e2:	fba3 2302 	umull	r2, r3, r3, r2
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	011e      	lsls	r6, r3, #4
 80036ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ec:	4618      	mov	r0, r3
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	1894      	adds	r4, r2, r2
 80036f8:	60bc      	str	r4, [r7, #8]
 80036fa:	415b      	adcs	r3, r3
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003702:	1812      	adds	r2, r2, r0
 8003704:	eb41 0303 	adc.w	r3, r1, r3
 8003708:	f04f 0400 	mov.w	r4, #0
 800370c:	f04f 0500 	mov.w	r5, #0
 8003710:	00dd      	lsls	r5, r3, #3
 8003712:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003716:	00d4      	lsls	r4, r2, #3
 8003718:	4622      	mov	r2, r4
 800371a:	462b      	mov	r3, r5
 800371c:	1814      	adds	r4, r2, r0
 800371e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003720:	414b      	adcs	r3, r1
 8003722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4618      	mov	r0, r3
 800372a:	f04f 0100 	mov.w	r1, #0
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	008b      	lsls	r3, r1, #2
 8003738:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800373c:	0082      	lsls	r2, r0, #2
 800373e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003742:	f7fc fe57 	bl	80003f4 <__aeabi_uldivmod>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4b2f      	ldr	r3, [pc, #188]	; (8003808 <UART_SetConfig+0x38c>)
 800374c:	fba3 1302 	umull	r1, r3, r3, r2
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	2164      	movs	r1, #100	; 0x64
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	3332      	adds	r3, #50	; 0x32
 800375e:	4a2a      	ldr	r2, [pc, #168]	; (8003808 <UART_SetConfig+0x38c>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800376a:	441e      	add	r6, r3
 800376c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800376e:	4618      	mov	r0, r3
 8003770:	f04f 0100 	mov.w	r1, #0
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	1894      	adds	r4, r2, r2
 800377a:	603c      	str	r4, [r7, #0]
 800377c:	415b      	adcs	r3, r3
 800377e:	607b      	str	r3, [r7, #4]
 8003780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003784:	1812      	adds	r2, r2, r0
 8003786:	eb41 0303 	adc.w	r3, r1, r3
 800378a:	f04f 0400 	mov.w	r4, #0
 800378e:	f04f 0500 	mov.w	r5, #0
 8003792:	00dd      	lsls	r5, r3, #3
 8003794:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003798:	00d4      	lsls	r4, r2, #3
 800379a:	4622      	mov	r2, r4
 800379c:	462b      	mov	r3, r5
 800379e:	eb12 0a00 	adds.w	sl, r2, r0
 80037a2:	eb43 0b01 	adc.w	fp, r3, r1
 80037a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f04f 0100 	mov.w	r1, #0
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	008b      	lsls	r3, r1, #2
 80037ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037be:	0082      	lsls	r2, r0, #2
 80037c0:	4650      	mov	r0, sl
 80037c2:	4659      	mov	r1, fp
 80037c4:	f7fc fe16 	bl	80003f4 <__aeabi_uldivmod>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <UART_SetConfig+0x38c>)
 80037ce:	fba3 1302 	umull	r1, r3, r3, r2
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	2164      	movs	r1, #100	; 0x64
 80037d6:	fb01 f303 	mul.w	r3, r1, r3
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	3332      	adds	r3, #50	; 0x32
 80037e0:	4a09      	ldr	r2, [pc, #36]	; (8003808 <UART_SetConfig+0x38c>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	f003 020f 	and.w	r2, r3, #15
 80037ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4432      	add	r2, r6
 80037f2:	609a      	str	r2, [r3, #8]
}
 80037f4:	bf00      	nop
 80037f6:	377c      	adds	r7, #124	; 0x7c
 80037f8:	46bd      	mov	sp, r7
 80037fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037fe:	bf00      	nop
 8003800:	40011000 	.word	0x40011000
 8003804:	40011400 	.word	0x40011400
 8003808:	51eb851f 	.word	0x51eb851f

0800380c <__libc_init_array>:
 800380c:	b570      	push	{r4, r5, r6, lr}
 800380e:	4d0d      	ldr	r5, [pc, #52]	; (8003844 <__libc_init_array+0x38>)
 8003810:	4c0d      	ldr	r4, [pc, #52]	; (8003848 <__libc_init_array+0x3c>)
 8003812:	1b64      	subs	r4, r4, r5
 8003814:	10a4      	asrs	r4, r4, #2
 8003816:	2600      	movs	r6, #0
 8003818:	42a6      	cmp	r6, r4
 800381a:	d109      	bne.n	8003830 <__libc_init_array+0x24>
 800381c:	4d0b      	ldr	r5, [pc, #44]	; (800384c <__libc_init_array+0x40>)
 800381e:	4c0c      	ldr	r4, [pc, #48]	; (8003850 <__libc_init_array+0x44>)
 8003820:	f000 f820 	bl	8003864 <_init>
 8003824:	1b64      	subs	r4, r4, r5
 8003826:	10a4      	asrs	r4, r4, #2
 8003828:	2600      	movs	r6, #0
 800382a:	42a6      	cmp	r6, r4
 800382c:	d105      	bne.n	800383a <__libc_init_array+0x2e>
 800382e:	bd70      	pop	{r4, r5, r6, pc}
 8003830:	f855 3b04 	ldr.w	r3, [r5], #4
 8003834:	4798      	blx	r3
 8003836:	3601      	adds	r6, #1
 8003838:	e7ee      	b.n	8003818 <__libc_init_array+0xc>
 800383a:	f855 3b04 	ldr.w	r3, [r5], #4
 800383e:	4798      	blx	r3
 8003840:	3601      	adds	r6, #1
 8003842:	e7f2      	b.n	800382a <__libc_init_array+0x1e>
 8003844:	0800389c 	.word	0x0800389c
 8003848:	0800389c 	.word	0x0800389c
 800384c:	0800389c 	.word	0x0800389c
 8003850:	080038a0 	.word	0x080038a0

08003854 <memset>:
 8003854:	4402      	add	r2, r0
 8003856:	4603      	mov	r3, r0
 8003858:	4293      	cmp	r3, r2
 800385a:	d100      	bne.n	800385e <memset+0xa>
 800385c:	4770      	bx	lr
 800385e:	f803 1b01 	strb.w	r1, [r3], #1
 8003862:	e7f9      	b.n	8003858 <memset+0x4>

08003864 <_init>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	bf00      	nop
 8003868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386a:	bc08      	pop	{r3}
 800386c:	469e      	mov	lr, r3
 800386e:	4770      	bx	lr

08003870 <_fini>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	bf00      	nop
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr
